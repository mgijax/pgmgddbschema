#!/bin/sh

#
# History
#
# 01/12/2004
#	- JSAM
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/SEQ_merge_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION SEQ_merge (
v_fromSeqID acc_accession.accID%TYPE,
v_toSeqID acc_accession.accID%TYPE
)
RETURNS VOID AS
\$\$

DECLARE
v_fromSeqKey int;
v_toSeqKey int;

BEGIN

--
-- Merge v_fromSeqID to v_toSeqID
--
-- 1) Move non-duplicate Seq ID/Reference associations (MGI_Reference)
-- 2) Make non-duplicate "from" Seq IDs secondary to the "to" Sequence object
-- 3) Delete the "from" Sequence object
--
--

v_fromSeqKey := _Object_key from SEQ_Sequence_Acc_View where accID = v_fromSeqID and preferred = 1;
v_toSeqKey := _Object_key from SEQ_Sequence_Acc_View where accID = v_toSeqID and preferred = 1;

IF v_fromSeqKey IS NULL
THEN
	RAISE EXCEPTION E'SEQ_merge: Could not resolve %.', v_fromSeqID;
	RETURN;
END IF;

IF v_toSeqKey IS NULL
THEN
	RAISE EXCEPTION E'SEQ_merge: Could not resolve %.', v_toSeqID;
	RETURN;
END IF;

-- References

UPDATE MGI_Reference_Assoc s1
SET _Object_key = v_toSeqKey
WHERE s1._MGIType_key = 19
AND s1._Object_key = v_fromSeqKey
AND NOT EXISTS (SELECT 1 FROM MGI_Reference_Assoc s2
	WHERE s2._MGIType_key = 19
	AND s2._Object_key = v_toSeqKey
	AND s2._Refs_key = s1._Refs_key)
;

-- Accession IDs

UPDATE ACC_Accession a1
SET _Object_key = v_toSeqKey, preferred = 0
WHERE a1._MGIType_key = 19
AND a1._Object_key = v_fromSeqKey
AND NOT EXISTS (SELECT 1 FROM ACC_Accession a2
	WHERE a2._MGIType_key = 19
	AND a2._Object_key = v_toSeqKey
	AND a2.accID = a1.accID)
;

-- Delete merged Sequence object
-- This will delete any remaining References, Accession IDs, Source, Notes, Cache

DELETE FROM SEQ_Sequence_Raw WHERE _Sequence_key = v_fromSeqKey;
DELETE FROM SEQ_Sequence WHERE _Sequence_key = v_fromSeqKey;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION SEQ_merge(varchar,varchar) TO public;

COMMENT ON FUNCTION mgd.SEQ_merge(varchar,varchar) IS 'merge sequences';

EOSQL

