#!/bin/sh

#
# History
#
# 07/22/2003	lec
#	- TR 3404/JSAM
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/PRB_processAnonymousSource_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION PRB_processAnonymousSource (
v_msoKey int,
v_segmentTypeKey int,
v_vectorTypeKey int,
v_organismKey int,
v_strainKey int,
v_tissueKey int,
v_genderKey int,
v_cellLineKey int,
v_age prb_source.age%TYPE,
v_tissueTreatment prb_source.description%TYPE,
v_modifiedByKey int,
v_verifyOrganismEdit int DEFAULT 1,
out v_newMSOKey int
)
AS
\$\$

-- process (modify) an Anonymous Molecular Source                         
--                                                                       
-- assumes:                                                             
-- 	that all edits to MS attributes are allowed.                   
--                                                                    
--      if this SP is called from the Molecular Source Processor     
--      then the MSP has already checked MGI_Attribute_History and  
--      has determined which attributes can be updated.            
--                                                                
-- does:                                                         
--                                                              
--      create a new or update an existing MSO (PRB_Source)    
--                                                            
-- implements:                                                
--     collapsing; that is, if a MSO has not been curator-edited
--     then it can be shared by multiple Probe or Sequence objects. 
--                                                                 
-- output:                                                        
--                                                               
--     the new MSO key (v_newMSOKey).                           
--                                                             
--     OR an error if the MSO being processed exists in the database 
--     and is not Anonymous.                                      
--                                                               

DECLARE
v_isCuratorEdited int;
v_ageMin numeric;
v_ageMax numeric;

BEGIN

-- if the MSO key exists in the database and is not Anonymous, then error & done.

IF EXISTS (select 1 from PRB_Source where _Source_key = v_msoKey)
   AND (select name from PRB_Source where _Source_key = v_msoKey) != null
THEN
	RAISE EXCEPTION E'Molecular Source is not Anonymous: %', v_msoKey;
	RETURN;
END IF;

-- set isCuratorEdited bit by checking if the "modified by" user is a curator (or not)

IF EXISTS (select 1 from MGI_User u, VOC_Term t
    where u._User_key = v_modifiedByKey
    and u._UserType_key = t._Term_key
    and t.term in ('Curator', 'BA', 'PI'))
THEN
        v_isCuratorEdited := 1;
ELSE
	v_isCuratorEdited := 0;
END IF;

-- if the MSO being processed is not curator-edited...    
-- then we can potentially collapse it (share it).       

IF v_isCuratorEdited = 0
THEN

    /* if an MSO exists which matches the input parameters     */
    /* and the existing MSO is not curator-edited              */
    /* then return the existing MSO key; share it (collapse).  */

    SELECT _Source_key 
	FROM PRB_Source 
	    WHERE _SegmentType_key = v_segmentTypeKey
	    AND _Vector_key = v_vectorTypeKey
	    AND _Organism_key = v_organismKey
	    AND _Strain_key = v_strainKey
	    AND _Tissue_key = v_tissueKey
	    AND _Gender_key = v_genderKey
	    AND _CellLine_key = v_cellLineKey
	    AND age = v_age
	    AND isCuratorEdited = 0
    INTO v_newMSOKey
	    ;
    IF v_newMSOKey IS NOT NULL
    THEN
    	RETURN;
    END IF;
END IF;

-- calculate the ageMin and ageMax values for age

SELECT * FROM PRB_ageMinMax(v_age) into v_ageMin, v_ageMax;

-- if the MSO key exists and if any MSO attribute has changed...

IF EXISTS (select 1 from PRB_Source where _Source_key = v_msoKey)
THEN

   v_newMSOKey := v_msoKey;

   IF (select v_verifyOrganismEdit) = 1 and
      (select _Organism_key from PRB_Source where _Source_key = v_msoKey) != v_organismKey and
      not exists (select 1 from MGI_UserTask_View
                  where usertask = 'molecular source:organism'
                  and login = current_user)
   THEN
	RAISE EXCEPTION E'You do not have permission to modify this Source''s Organism.';
	RETURN;
   END IF;

   IF (select _SegmentType_key from PRB_Source where _Source_key = v_msoKey) != v_segmentTypeKey or
      (select _Vector_key from PRB_Source where _Source_key = v_msoKey) != v_vectorTypeKey or
      (select _Organism_key from PRB_Source where _Source_key = v_msoKey) != v_organismKey or
      (select _Strain_key from PRB_Source where _Source_key = v_msoKey) != v_strainKey or
      (select _Tissue_key from PRB_Source where _Source_key = v_msoKey) != v_tissueKey or
      (select _Gender_key from PRB_Source where _Source_key = v_msoKey) != v_genderKey or
      (select _CellLine_key from PRB_Source where _Source_key = v_msoKey) != v_cellLineKey or
      (select age from PRB_Source where _Source_key = v_msoKey) != v_age or
      (select description from PRB_Source where _Source_key = v_msoKey) != v_tissueTreatment or
      ((select description from PRB_Source where _Source_key = v_msoKey) is null and (v_tissueTreatment is not null)) or
      ((select description from PRB_Source where _Source_key = v_msoKey) is not null and (v_tissueTreatment is null))
   THEN

       -- if the MSO is collapsed, then uncollapse it (create a new MSO)

       IF (select count(*) from PRB_Probe where _Source_key = v_msoKey) > 1 or
          (select count(*) from SEQ_Source_Assoc where _Source_key = v_msoKey) > 1
       THEN
	   -- insert a new MSO record using the existing collapsed MSO object

           v_newMSOKey := max(_Source_key) + 1 from PRB_Source;

	   INSERT INTO PRB_Source
	   SELECT v_newMSOKey, _SegmentType_key, _Vector_key, _Organism_key,
	       _Strain_key, _Tissue_key, _Gender_key, _CellLine_key, _Refs_key,
	       name, description, age, ageMin, ageMax,
	       isCuratorEdited, _CreatedBy_key, _ModifiedBy_key, creation_date, modification_date
	   FROM PRB_Source 
	   WHERE _Source_key = v_msoKey
	   ;
	
	   -- update the new MSO using the input parameters

	   UPDATE PRB_Source
	   SET _SegmentType_key = v_segmentTypeKey,
	   _Vector_key = v_vectorTypeKey,
	   _Organism_key = v_organismKey,
	   _Strain_key = v_strainKey,
	   _Tissue_key = v_tissueKey,
	   _Gender_key = v_genderKey,
	   _CellLine_key = v_cellLineKey,
	   age = v_age,
	   ageMin = v_ageMin,
	   ageMax = v_ageMax,
	   description = v_tissueTreatment,
	   isCuratorEdited = v_isCuratorEdited,
	   _ModifiedBy_key = v_modifiedByKey,
	   modification_date = current_date
	   WHERE _Source_key = v_newMSOKey
	   ;

	   RETURN;

       -- else, just update it
       ELSE
	   UPDATE PRB_Source
	   SET _SegmentType_key = v_segmentTypeKey,
	   _Vector_key = v_vectorTypeKey,
	   _Organism_key = v_organismKey,
	   _Strain_key = v_strainKey,
	   _Tissue_key = v_tissueKey,
	   _Gender_key = v_genderKey,
	   _CellLine_key = v_cellLineKey,
	   age = v_age,
	   ageMin = v_ageMin,
	   ageMax = v_ageMax,
	   description = v_tissueTreatment,
	   isCuratorEdited = v_isCuratorEdited,
	   _ModifiedBy_key = v_modifiedByKey,
	   modification_date = current_date
	   WHERE _Source_key = v_msoKey
	   ;

	   RETURN;
       END IF;
   END IF;

-- else create a new MSO object

ELSE
        v_newMSOKey := max(_Source_key) + 1 from PRB_Source;

	INSERT INTO PRB_Source
	VALUES (v_newMSOKey, v_segmentTypeKey, v_vectorTypeKey, v_organismKey,
	    v_strainKey, v_tissueKey, v_genderKey, v_cellLineKey, NULL, NULL, v_tissueTreatment, v_age,
	    v_ageMin, v_ageMax, v_isCuratorEdited, v_modifiedBykey, v_modifiedBykey,
	    current_date, current_date)
	;

	RETURN;
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION PRB_processAnonymousSource(int,int,int,int,int,int,int,int,varchar,text,int,int) to public;

COMMENT ON FUNCTION mgd.PRB_processAnonymousSource(int,int,int,int,int,int,int,int,varchar,text,int,int) IS 'process (modify) an Anonymous Molecular Source';

EOSQL

