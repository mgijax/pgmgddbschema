#!/bin/sh

#
# History
#
# 03/3/3016	lec
#	- TR 12223; gxd anatomy II; added MGI_SetMember
#
# 03/16/2006	lec
#	- TR 7530; removed MLD_Marker
#
# 01/18/2002	lec
#	- TR 2867; added GXD_AllelePair
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MGI_resetSequenceNum_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MGI_resetSequenceNum (
v_table text,
v_key int,		/* Primary key */
v_userKey int DEFAULT 0
)
RETURNS VOID AS
\$\$

DECLARE
pkey int;	/* primary key of records to UPDATE */
oldSeq int;	/* current sequence number */
newSeq int;	/* new sequence number */
seq_cursor refcursor;

BEGIN

/* Re-order the sequenceNum field so that they are
continuous and there are no gaps.
ex. 1,2,5,6,7 would be reordered to 1,2,3,4,5
*/

newSeq := 1;

IF (v_table = 'GXD_AllelePair')
THEN
	OPEN seq_cursor FOR
	SELECT _AllelePair_key, sequenceNum
	FROM GXD_AllelePair
	WHERE _Genotype_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'GXD_AlleleGenotype')
THEN
	OPEN seq_cursor FOR
	SELECT _Allele_key, sequenceNum
	FROM GXD_AlleleGenotype
	WHERE _Allele_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'GXD_GelLane')
THEN
	OPEN seq_cursor FOR
	SELECT _GelLane_key, sequenceNum
	FROM GXD_GelLane
	WHERE _Assay_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'GXD_GelRow')
THEN
	OPEN seq_cursor FOR
	SELECT _GelRow_key, sequenceNum
	FROM GXD_GelRow
	WHERE _Assay_key = v_key
	ORDER BY size desc
	;

ELSIF (v_table = 'GXD_Specimen')
THEN
	OPEN seq_cursor FOR
	SELECT _Specimen_key, sequenceNum
	FROM GXD_Specimen
	WHERE _Assay_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'GXD_InSituResult')
THEN
	OPEN seq_cursor FOR
	SELECT _Result_key, sequenceNum
	FROM GXD_InSituResult
	WHERE _Specimen_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MRK_History')
THEN
	OPEN seq_cursor FOR
	SELECT _Marker_key, sequenceNum
	FROM MRK_History
	WHERE _Marker_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_Expt_Marker')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_Expt_Marker
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_MCDataList')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_MCDataList
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_MC2point')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_MC2point
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_RIData')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_RIData
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_RI2Point')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_RI2Point
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_FISH_Region')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_FISH_Region
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MRK_Chromosome')
THEN
	OPEN seq_cursor FOR
	SELECT _Chromosome_key, sequenceNum
	FROM MRK_Chromosome
	WHERE _Organism_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MLD_Statistics')
THEN
	OPEN seq_cursor FOR
	SELECT _Expt_key, sequenceNum
	FROM MLD_Statistics
	WHERE _Expt_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MGI_Translation')
THEN
	OPEN seq_cursor FOR
	SELECT _TranslationType_key, sequenceNum
	FROM MGI_Translation
	WHERE _TranslationType_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'VOC_Term')
THEN
	OPEN seq_cursor FOR
	SELECT _Vocab_key, sequenceNum
	FROM VOC_Term
	WHERE _Vocab_key = v_key
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'MGI_SetMember')
THEN
	OPEN seq_cursor FOR
	SELECT _SetMember_key, sequenceNum
	FROM MGI_SetMember
	WHERE _Set_key = v_key and _CreatedBy_key = v_userKey
	ORDER BY sequenceNum
	;

ELSIF (v_table = 'VOC_AnnotHeaderMP')
THEN
	OPEN seq_cursor FOR
	SELECT _Object_key, sequenceNum
	FROM VOC_AnnotHeader
	WHERE _AnnotType_key = 1002 and _Object_key = v_key
	ORDER BY sequenceNum
	;

else
	return;

END IF;

LOOP
        FETCH seq_cursor INTO pkey, oldSeq;
        EXIT WHEN NOT FOUND;

	IF (v_table = 'GXD_AllelePair')
	THEN
		UPDATE GXD_AllelePair set sequenceNum = newSeq
		WHERE _AllelePair_key = pkey;

	ELSIF (v_table = 'GXD_AlleleGenotype')
	THEN
		UPDATE GXD_AlleleGenotype set sequenceNum = newSeq
		WHERE _Allele_key = pkey;

	ELSIF (v_table = 'GXD_GelLane')
	THEN
		UPDATE GXD_GelLane set sequenceNum = newSeq
		WHERE _GelLane_key = pkey;

	ELSIF (v_table = 'GXD_GelRow')
	THEN
		UPDATE GXD_GelRow set sequenceNum = newSeq
		WHERE _GelRow_key = pkey;

	ELSIF (v_table = 'GXD_Specimen')
	THEN
		UPDATE GXD_Specimen set sequenceNum = newSeq
		WHERE _Specimen_key = pkey;

	ELSIF (v_table = 'GXD_InSituResult')
	THEN
		UPDATE GXD_InSituResult set sequenceNum = newSeq
		WHERE _Result_key = pkey;

	ELSIF (v_table = 'MRK_History')
	THEN
		UPDATE MRK_History set sequenceNum = newSeq
		WHERE _Marker_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_Expt_Marker')
	THEN
		UPDATE MLD_Expt_Marker set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_MCDataList')
	THEN
		UPDATE MLD_MCDataList set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_MC2point')
	THEN
		UPDATE MLD_MC2point set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_RIData')
	THEN
		UPDATE MLD_RIData set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_RI2Point')
	THEN
		UPDATE MLD_RI2Point set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MLD_FISH_Region')
	THEN
		UPDATE MLD_FISH_Region set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MRK_Chromosome')
	THEN
		UPDATE MRK_Chromosome set sequenceNum = newSeq
		WHERE _Chromosome_key = pkey;

	ELSIF (v_table = 'MLD_Statistics')
	THEN
		UPDATE MLD_Statistics set sequenceNum = newSeq
		WHERE _Expt_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MGI_Translation')
	THEN
		UPDATE MGI_Translation set sequenceNum = newSeq
		WHERE _TranslationType_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'VOC_Term')
	THEN
		UPDATE VOC_Term set sequenceNum = newSeq
		WHERE _Vocab_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'VOC_AnnotHeaderMP')
	THEN
		UPDATE VOC_AnnotHeader set sequenceNum = newSeq
		WHERE _AnnotType_key = 1002 and _Object_key = pkey and sequenceNum = oldSeq;

	ELSIF (v_table = 'MGI_SetMember')
	THEN
		UPDATE MGI_SetMember set sequenceNum = newSeq
		WHERE _SetMember_key = pkey and _CreatedBy_key = v_userKey and sequenceNum = oldSeq;

	END IF;

        newSeq := newSeq + 1;

END LOOP;

CLOSE seq_cursor;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MGI_resetSequenceNum(text,int,int) TO public;

COMMENT ON FUNCTION mgd.MGI_resetSequenceNum(text,int,int) IS 'resets the sequenceNum field on specific table/object';

EOSQL
