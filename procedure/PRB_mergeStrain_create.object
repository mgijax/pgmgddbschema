#!/bin/sh

#
# History
#
# 05/04/2015
#       - changed "Old and New" to "Incorrect and Correct"
#
# 06/02/2014
#	- fix strainAttributesType : 'Strain Attributes' -> 'Strain/Attributes'
#
# 03/03/2006 lec
#	- removed SNP tables, MGI_Set
#
# 02/10/2006 lec
#	- added SNP tables, MGI_Set
#
# 05/30/2002 lec
#	- revised update to ALL_Allele 
#
# 10/30/2001 lec
#	- TR 2541; revised the Merge
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/PRB_mergeStrain_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION PRB_mergeStrain (
v_oldStrainKey int,
v_newStrainKey int
)
RETURNS VOID AS
\$\$

DECLARE

v_alleleKey int;
v_probe text;
v_jnum text;
v_strainAttributesType int;
v_oldNeedsReviewSum int;
v_newNeedsReviewSum int;
v_jaxRegistryNew acc_accession.accID%TYPE;
v_jaxRegistryOld acc_accession.accID%TYPE;
v_strainmergeKey int;

v_noteTypeKey int;
v_note1 text;
v_note2 text;

v_nextKey int;
v_synTypeKey int;
v_nextSeqKey int;

BEGIN

-- Update old Strain key to new Strain key
-- in all relevant tables which contain a Strain key.
-- When finished, remove the Strain record for the old Strain key.

IF v_oldStrainKey = v_newStrainKey
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Cannot merge a Strain into itself.';
	RETURN;
END IF;

-- Check for valid merge conditions
-- disallowed:
--	private -> public
--      public -> private
--      Standard -> Non Standard 

IF (SELECT private FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey) = 1
   AND
   (SELECT private FROM PRB_Strain WHERE _Strain_key = v_newStrainKey) = 0
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Cannot merge Private Strain into Public Strain.';
	RETURN;
END IF;

IF (SELECT private FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey) = 0
   AND
   (SELECT private FROM PRB_Strain WHERE _Strain_key = v_newStrainKey) = 1
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Cannot merge Public Strain into Private Strain';
	RETURN;
END IF;

IF (SELECT standard FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey) = 1
   AND
   (SELECT standard FROM PRB_Strain WHERE _Strain_key = v_newStrainKey) = 0
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Cannot merge Standard Strain into Non-Standard Strain';
	RETURN;
END IF;

-- Check for potential duplicate Probe RFLV Entries

FOR v_alleleKey IN
SELECT DISTINCT _Allele_key
FROM PRB_Allele_Strain
WHERE _Strain_key in (v_oldStrainKey, v_newStrainkey)
GROUP by _Allele_key having count(*) > 1
LOOP
	SELECT p.name as v_probe, b.accID as v_jnum
	FROM PRB_Allele a, PRB_RFLV v, PRB_Reference  r, PRB_Probe p, BIB_Acc_View b
	WHERE a._Allele_key = v_alleleKey and
	      a._RFLV_key = v._RFLV_key and
	      v._Reference_key = r._Reference_key and
	      r._Probe_key = p._Probe_key and
	      r._Refs_key = b._Object_key and
	      b.prefixPart = 'J:' and
	      b._LogicalDB_key = 1
        ;

	RAISE EXCEPTION E'PRB_mergeStrain: This merge would create a duplicate entry for Probe %, %.', v_probe, v_jnum;
	RETURN;
END LOOP;

-- all Strains must have same symbols

IF EXISTS (SELECT m1.* FROM PRB_Strain_Marker m1
           WHERE m1._Strain_key = v_newStrainKey
	   AND NOT EXISTS
	   (SELECT m2.* FROM PRB_Strain_Marker m2
	    WHERE m2._Strain_key = v_oldStrainKey AND
	    m2._Marker_key = m1._Marker_key))
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Marker Symbols.';
	RETURN;
END IF;

IF EXISTS (SELECT m1.* FROM PRB_Strain_Marker m1
           WHERE m1._Strain_key = v_oldStrainKey
	   AND NOT EXISTS
	   (SELECT m2.* FROM PRB_Strain_Marker m2
	    WHERE m2._Strain_key = v_newStrainKey AND
	    m2._Marker_key = m1._Marker_key))
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Marker Symbols.';
	RETURN;
END IF;

-- both Strains must have the same Strain Attributes

--v_strainAttributesType := _AnnotType_key from VOC_AnnotType WHERE name = 'Strain/Attributes';
--v_strainmergeKey := _User_key from MGI_User WHERE login = 'strainmerge';
v_strainAttributesType := 1009;
v_strainmergeKey := 1400;

IF EXISTS (SELECT m1.* FROM VOC_Annot m1
           WHERE m1._Object_key = v_newStrainKey
	   AND m1._AnnotType_key = v_strainAttributesType
	   AND NOT EXISTS
	   (SELECT m2.* FROM VOC_Annot m2
	    WHERE m2._Object_key = v_oldStrainKey
	    AND m2._AnnotType_key = v_strainAttributesType
	    AND m2._Term_key = m1._Term_key))
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Strain Attributes.';
	RETURN;
END IF;

IF EXISTS (SELECT m1.* FROM VOC_Annot m1
           WHERE m1._Object_key = v_oldStrainKey
	   AND m1._AnnotType_key = v_strainAttributesType
	   AND NOT EXISTS
	   (SELECT m2.* FROM VOC_Annot m2
	    WHERE m2._Object_key = v_newStrainKey
	    AND m2._AnnotType_key = v_strainAttributesType
	    AND m2._Term_key = m1._Term_key))
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Strain Attributes.';
	RETURN;
END IF;

-- both Strains must have the same Species value

IF (SELECT _Species_key FROM PRB_Strain WHERE _Strain_key = v_newStrainKey) !=
   (SELECT _Species_key FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey)
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Species.';
	RETURN;
END IF;

-- both Strains must have the same Needs Review values

v_oldNeedsReviewSum := sum(_Term_key) from PRB_Strain_NeedsReview_View WHERE _Object_key = v_oldStrainKey;
v_newNeedsReviewSum := sum(_Term_key) from PRB_Strain_NeedsReview_View WHERE _Object_key = v_newStrainKey;

IF (v_oldNeedsReviewSum != v_newNeedsReviewSum)
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same Needs Review values.';
	RETURN;
END IF;

-- JAX Registry - must be equal OR use the one that exists

v_jaxRegistryNew := NULL;
v_jaxRegistryOld := NULL;

IF EXISTS (SELECT accID FROM ACC_Accession 
	   WHERE _Object_key = v_newStrainKey and _LogicalDB_Key = 22 and _MGIType_key = 10)
THEN
	v_jaxRegistryNew := accID FROM ACC_Accession 
		WHERE _Object_key = v_newStrainKey and _LogicalDB_Key = 22 and _MGIType_key = 10;
END IF;

IF EXISTS (SELECT _Accession_key FROM ACC_Accession
           WHERE _Object_key = v_oldStrainKey and _LogicalDB_Key = 22 and _MGIType_key = 10)
THEN
	v_jaxRegistryOld := accID FROM ACC_Accession
		WHERE _Object_key = v_oldStrainKey and _LogicalDB_Key = 22 and _MGIType_key = 10;
END IF;

IF (v_jaxRegistryNew != NULL AND v_jaxRegistryOld != NULL AND v_jaxRegistryNew != v_jaxRegistryOld)
THEN
	RAISE EXCEPTION E'PRB_mergeStrain: Incorrect and Correct Strains must have the same JAX Registry Number.';
	RETURN;
ELSIF (v_jaxRegistryOld != NULL)
THEN
    v_jaxRegistryNew := v_jaxRegistryOld;
END IF;

-- Set the preferred bit to 0 for all MGI Acc# brought over from old strain.

UPDATE ACC_Accession 
SET _Object_key = v_newStrainKey, preferred = 0
WHERE _LogicalDB_key = 1 and _MGIType_key = 10 and _Object_key = v_oldStrainKey
;

-- remove any Accession records belonging to old strain 
-- which already exist for new strain 
-- that is, remove duplicates before updating keys 

DELETE FROM ACC_Accession old
USING ACC_Accession new
WHERE old._MGIType_key = 10
AND old._Object_key = v_oldStrainKey
AND old.accID = new.accID
AND old._LogicalDB_key = new._LogicalDB_key
AND new._Object_key = v_newStrainKey
AND new._MGIType_key = 10
;

UPDATE ACC_Accession 
SET _Object_key = v_newStrainKey
WHERE _MGIType_key = 10 and _Object_key = v_oldStrainKey
;

UPDATE ALL_Allele
SET _Strain_key = v_newStrainKey, _ModifiedBy_key = v_strainmergeKey, modification_date = now()
WHERE _Strain_key = v_oldStrainKey
;

UPDATE ALL_CellLine
SET _Strain_key = v_newStrainKey
WHERE _Strain_key = v_oldStrainKey
;

UPDATE PRB_Source
SET _Strain_key = v_newStrainKey, _ModifiedBy_key = v_strainmergeKey, modification_date = now()
WHERE _Strain_key = v_oldStrainKey
;

UPDATE PRB_Allele_Strain
SET _Strain_key = v_newStrainKey, _ModifiedBy_key = v_strainmergeKey, modification_date = now()
WHERE _Strain_key = v_oldStrainKey
;

UPDATE MLD_FISH
SET _Strain_key = v_newStrainKey
WHERE _Strain_key = v_oldStrainKey
;

UPDATE MLD_InSitu
SET _Strain_key = v_newStrainKey
WHERE _Strain_key = v_oldStrainKey
;

UPDATE CRS_Cross
SET _femaleStrain_key = v_newStrainKey
WHERE _femaleStrain_key = v_oldStrainKey
;

UPDATE CRS_Cross
SET _maleStrain_key = v_newStrainKey
WHERE _maleStrain_key = v_oldStrainKey
;

UPDATE CRS_Cross
SET _StrainHO_key = v_newStrainKey
WHERE _StrainHO_key = v_oldStrainKey
;

UPDATE CRS_Cross
SET _StrainHT_key = v_newStrainKey
WHERE _StrainHT_key = v_oldStrainKey
;

UPDATE GXD_Genotype
SET _Strain_key = v_newStrainKey, _ModifiedBy_key = v_strainmergeKey, modification_date = now()
WHERE _Strain_key = v_oldStrainKey
;

UPDATE RI_RISet
SET _Strain_key_1 = v_newStrainKey
WHERE _Strain_key_1 = v_oldStrainKey
;

UPDATE RI_RISet
SET _Strain_key_2 = v_newStrainKey
WHERE _Strain_key_2 = v_oldStrainKey
;

-- NOTES

FOR v_noteTypeKey IN
SELECT _NoteType_key
FROM MGI_NoteType_Strain_View
LOOP
    -- if both old and new strains have notes, concatenate old notes onto new notes

    IF EXISTS (select 1 from MGI_Note 
		WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_newStrainKey)
       AND
       EXISTS (select 1 from MGI_Note 
		WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_oldStrainKey)
    THEN

    	v_note1 := c.note from MGI_Note n, MGI_NoteChunk c WHERE n._MGIType_key = 10 and n._NoteType_key = v_noteTypeKey and n._Object_key = v_newStrainKey and n._Note_key = c._Note_key;

	v_note2 := c.note from MGI_Note n, MGI_NoteChunk c WHERE n._MGIType_key = 10 and n._NoteType_key = v_noteTypeKey and n._Object_key = v_oldStrainKey and n._Note_key = c._Note_key;

	UPDATE MGI_NoteChunk c
	SET note = v_note1 || E'\n' || v_note2
	FROM MGI_Note n
	WHERE n._MGIType_key = 10 
	      AND n._NoteType_key = v_noteTypeKey 
	      AND n._Object_key = v_newStrainKey 
	      AND n._Note_key = c._Note_key
	;

	DELETE FROM MGI_Note WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_oldStrainKey;

    -- else if only old strain has notes, move old notes to new notes 

    ELSIF NOT EXISTS (SELECT 1 FROM MGI_Note 
		WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_newStrainKey)
       AND
       EXISTS (SELECT 1 FROM MGI_Note 
		WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_oldStrainKey)
    THEN
        UPDATE MGI_Note 
        SET _Object_key = v_newStrainKey 
        WHERE _MGIType_key = 10 and _NoteType_key = v_noteTypeKey and _Object_key = v_oldStrainKey
	;
    END IF;

    -- else if only new strain has notes, do nothing 

END LOOP;

-- END NOTES

-- STRAIN/MARKER/ALLELES

-- remove duplicates
DELETE FROM PRB_Strain_Marker p1
USING PRB_Strain_Marker p2
WHERE p1._Strain_key = v_oldStrainKey
AND p1._Marker_key = p2._Marker_key
AND p1._Allele_key = p2._Allele_key
AND p2._Strain_key = v_newStrainKey
;

UPDATE PRB_Strain_Marker
SET _Strain_key = v_newStrainKey
WHERE _Strain_key = v_oldStrainKey
;

-- TRANSLATIONS

-- remove duplicates 
DELETE FROM MGI_Translation t1
USING MGI_TranslationType tt, MGI_Translation t2
WHERE tt._MGIType_key = 10
and tt._TranslationType_key = t1._TranslationType_key
and t1._Object_key = v_oldStrainKey
and tt._TranslationType_key = t2._TranslationType_key
and t2._Object_key = v_newStrainKey
and t1.badName = t2.badName
;

UPDATE MGI_Translation
SET _Object_key = v_newStrainKey
FROM MGI_TranslationType tt
WHERE tt._MGIType_key = 10
AND tt._TranslationType_key = MGI_Translation._TranslationType_key
AND MGI_Translation._Object_key = v_oldStrainKey
;

-- SETS 

-- remove duplicates 
DELETE FROM MGI_SetMember s1
USING MGI_Set s, MGI_SetMember s2
WHERE s._MGIType_key = 10
AND s._Set_key = s1._Set_key
AND s1._Object_key = v_oldStrainKey
AND s._Set_key = s2._Set_key
AND s2._Object_key = v_newStrainKey
;

UPDATE MGI_SetMember
SET _Object_key = v_newStrainKey
FROM MGI_Set s
WHERE s._MGIType_key = 10
and s._Set_key = MGI_SetMember._Set_key
and MGI_SetMember._Object_key = v_oldStrainKey
;

-- SYNONYMS 

UPDATE MGI_Synonym
SET _Object_key = v_newStrainKey
WHERE _Object_key = v_oldStrainKey
AND _MGIType_key = 10
;

-- if the strain names are not equal 
--   a.  make old strain name a synonym of the new strain 
--   b.  make old strain name a translation of the new strain 

IF (SELECT strain FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey) !=
   (SELECT strain FROM PRB_Strain WHERE _Strain_key = v_newStrainKey)
THEN
	v_nextKey := max(_Synonym_key) + 1 from MGI_Synonym;
	--v_synTypeKey := _SynonymType_key from MGI_SynonymType_Strain_View  WHERE synonymType = 'nomenclature history';
	v_synTypeKey := 1001;

	IF v_nextKey IS NULL 
	THEN
		v_nextKey := 1000;
	END IF;

	INSERT INTO MGI_Synonym (_Synonym_key, _MGIType_key, _Object_key, _SynonymType_key, _Refs_key, synonym)
	SELECT v_nextKey, 10, v_newStrainKey, v_synTypeKey, null, strain
	FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey
	;

	v_nextKey := max(_Translation_key) + 1 from MGI_Translation;
	v_nextSeqKey := max(sequenceNum) + 1 from MGI_Translation WHERE _TranslationType_key = 1007;

	INSERT INTO MGI_Translation (_Translation_key, _TranslationType_key, _Object_key, badName, sequenceNum,
		_CreatedBy_key, _ModifiedBy_key, creation_date, modification_date)
	SELECT v_nextKey, 1007, v_newStrainKey, strain, v_nextSeqKey, v_strainmergeKey, v_strainmergeKey,
		now(), now()
	FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey
	;
END IF;

DELETE FROM PRB_Strain WHERE _Strain_key = v_oldStrainKey;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION PRB_mergeStrain(int,int) TO public;

COMMENT ON FUNCTION mgd.PRB_mergeStrain(int,int) IS 'strain merge';

EOSQL
