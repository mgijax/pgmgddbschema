#!/bin/sh

#
# HISTORY
#
# lec	11/05/2003
#	- TR 4826
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION MGI_resetAgeMinMax(varchar,int);

CREATE OR REPLACE FUNCTION MGI_resetAgeMinMax (
v_table varchar(255),		/* Table Name */
v_key int			/* Primary key */
)
RETURNS VOID AS
\$\$

DECLARE
v_pkey int; 	/* primary key of records to update */
v_age varchar(50);
v_ageMin numeric;
v_ageMax numeric;
age_cursor refcursor;

BEGIN

/* Update the Age Min, Age Max values */
if (v_table = 'GXD_Expression')
then
	OPEN age_cursor FOR
	select _Expression_key, age
	from GXD_Expression
	where _Expression_key = v_key
	;

elsif (v_table = 'GXD_GelLane')
then
	OPEN age_cursor FOR
	select _GelLane_key, age
	from GXD_GelLane
	where _GelLane_key = v_key
	;

elsif (v_table = 'GXD_Specimen')
then
	OPEN age_cursor FOR
	select _Specimen_key, age
	from GXD_Specimen
	where _Specimen_key = v_key
	;

elsif (v_table = 'PRB_Source')
then
	OPEN age_cursor FOR
	select _Source_key, age
	from PRB_Source
	where _Source_key = v_key
	;

else
	return;

end if;

LOOP
	FETCH age_cursor into v_pkey, v_age;
	EXIT WHEN NOT FOUND;

	select * from PRB_ageMinMax(v_age) into v_ageMin, v_ageMax;

	if (v_table = 'GXD_Expression')
	then
		update GXD_Expression 
		set ageMin = v_ageMin, ageMax = v_ageMax where _Expression_key = v_pkey
		;

	elsif (v_table = 'GXD_GelLane')
	then
		update GXD_GelLane 
		set ageMin = v_ageMin, ageMax = v_ageMax where _GelLane_key = v_pkey
		;

	elsif (v_table = 'GXD_Specimen')
	then
		update GXD_Specimen 
		set ageMin = v_ageMin, ageMax = v_ageMax where _Specimen_key = v_pkey
		;

	elsif (v_table = 'PRB_Source')
	then
		update PRB_Source 
		set ageMin = v_ageMin, ageMax = v_ageMax where _Source_key = v_pkey
		;

	end if;

END LOOP;

CLOSE age_cursor;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MGI_resetAgeMinMax(varchar,int) TO public;

COMMENT ON FUNCTION mgd.MGI_resetAgeMinMax(varchar,int) IS '';

EOSQL
