#!/bin/sh

#
# History
#
# 07/22/2003	lec
#	- TR 3404/JSAM
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION PRB_ageMinMax(varchar);

CREATE OR REPLACE FUNCTION PRB_ageMinMax (
v_age varchar(50),
out v_ageMin numeric,
out v_ageMax numeric
)
AS
\$\$

DECLARE
saveAge varchar(50);
stem varchar(50);
timeUnit varchar(25);
timeRange varchar(25);
i integer;
idx integer;
idx2 integer;
minValue numeric;
maxValue numeric;

BEGIN

saveAge := v_age;

/* return ageMin and ageMax values, given age */
IF v_age = 'Not Specified' 
	or v_age = 'Not Applicable' 
	or v_age = 'Not Resolved' 
	or v_age = 'Not Loaded'
THEN
	v_ageMin := -1.0;
	v_ageMax := -1.0;

/* IF there are no time units or ranges, then it's simple */
ELSIF v_age = 'embryonic'
THEN
	v_ageMin := 0.0;
	v_ageMax := 21.0;

ELSIF v_age = 'perinatal'
THEN
	v_ageMin := 17.0;
	v_ageMax := 22.0;

ELSIF v_age = 'postnatal'
THEN
	v_ageMin := 21.01;
	v_ageMax := 1846.0;

ELSIF v_age = 'postnatal newborn'
THEN
	v_ageMin := 21.01;
	v_ageMax := 25.0;

ELSIF v_age = 'postnatal immature'
THEN
	v_ageMin := 25.01;
	v_ageMax := 42.0;

ELSIF v_age = 'postnatal adult'
THEN
	v_ageMin := 42.01;
	v_ageMax := 1846.0;

ELSIF v_age = 'postnatal day'
	or v_age = 'postnatal week'
	or v_age = 'postnatal month'
	or v_age = 'postnatal year'
THEN
	RAISE NOTICE E'Invalid Age Value %', v_age;
	RETURN;

/* parse the age INTO 3 parts:           */
/*     stem (embryonic, postnatal),      */
/*     time unit (day, week, month year) */
/*     time range (x   x,y,z   x-y)      */
ELSE

    minValue := 5000.0;
    maxValue := -1.0;
    i := 0;

    WHILE v_age is not null and i < 3 LOOP

        idx := position(' ' in v_age);

        IF idx > 0 THEN
            IF i = 0 THEN
                stem := substring(v_age, 1, idx - 1);
            ELSIF i = 1 THEN
                timeUnit := substring(v_age, 1, idx - 1);
            ELSIF i = 1 THEN
                timeRange := substring(v_age, 1, char_length(v_age));
	    END IF;

            v_age := substring(v_age, idx + 1, char_length(v_age));
        ELSE
            timeRange := substring(v_age, 1, char_length(v_age));
            v_age := null;
        END IF;

        i := i + 1;

    END LOOP; -- WHILE v_age != null...

    /* once the stem, time unit and time range have been parsed, */
    /* determine the,mat of the time range and process accordingly. */

    /*,mat is:                     */
    /*     embryonic day x,y,z        */
    /*     embryonic day x-y,z        */
    /*     embryonic day x,y-z        */
    /*                                */
    /* we assume that x is the min and z is the max */
    /*                                              */
    /* NOTE:  there are very fiew of these cases (29 as of 07/23/2003) */

    IF position(',' in timeRange) > 0 THEN

        WHILE timeRange != null LOOP
            idx := position(',' in timeRange);
            idx2 := position('-' in timeRange);

            IF idx2 > 0 THEN

                /* the x-y of an "x-y,z..." */

                IF idx > idx2 THEN
                    IF minValue > substring(timeRange, 1, idx2 - 1)::NUMERIC THEN
                        minValue := substring(timeRange, 1, idx2 - 1)::NUMERIC;
		    END IF;
                    IF maxValue < substring(timeRange, idx2 + 1, idx - idx2 - 1)::NUMERIC THEN
                        maxValue := substring(timeRange, idx2 + 1, idx - idx2 - 1)::NUMERIC;
		    END IF;

                /* more timeRanges (more commas) */
                ELSIF idx > 0 THEN
                    IF minValue > substring(timeRange, 1, idx - 1)::NUMERIC THEN
                        minValue := substring(timeRange, 1, idx - 1)::NUMERIC;
		    END IF;
                    IF maxValue < convert(numeric, substring(timeRange, 1, idx - 1)) THEN
                        maxValue := substring(timeRange, 1, idx - 1)::NUMERIC;
		    END IF;

                /* last timeRange */
                ELSE
                    IF minValue > substring(timeRange, 1, idx2 - 1)::NUMERIC THEN
                        minValue := substring(timeRange, 1, idx2 - 1)::NUMERIC;
		    END IF;
                    IF maxValue < substring(timeRange, idx2 + 1, char_length(timeRange))::NUMERIC THEN
                        maxValue := substring(timeRange, idx2 + 1, char_length(timeRange))::NUMERIC;
		    END IF;

                END IF;

            ELSE
                /* more timeRanges */
                IF idx > 0 THEN
                    IF minValue > substring(timeRange, 1, idx - 1)::NUMERIC THEN
                        minValue := substring(timeRange, 1, idx - 1)::NUMERIC;
                    END IF;
                    IF maxValue < substring(timeRange, 1, idx - 1)::NUMERIC THEN
                        maxValue := substring(timeRange, 1, idx - 1)::NUMERIC;
                    END IF;

                /* last timeRange */
                ELSE
                    IF minValue > timeRange::NUMERIC THEN
                        minValue := timeRange::NUMERIC;
                    END IF;
                    IF maxValue < timeRange::NUMERIC THEN
                        maxValue := timeRange::NUMERIC;
		    END IF;
                END IF;
            END IF;

            IF position(',' in timeRange) = 0 THEN
                timeRange := null;
            ELSE
                timeRange := substring(timeRange, idx + 1, char_length(timeRange));
            END IF;

        END LOOP;

    ELSE

        /*,mat is:                     */
        /*     embryonic day x-y          */

        idx := position('-' in timeRange);

        IF idx > 0 THEN
            minValue := substring(timeRange, 1, idx - 1)::NUMERIC;
            maxValue := substring(timeRange, idx + 1, char_length(timeRange))::NUMERIC;

        /*,mat is:                     */
        /*     embryonic day x            */

        ELSE
            minValue := timeRange::NUMERIC;
            maxValue := timeRange::NUMERIC;
        END IF;

    END IF; -- end IF position(',' in timeRange) > 0 THEN

    IF minValue is null or maxValue is null THEN
        RAISE notice E'Invalid Age Range: Must enter a single (x), range (x-y), list (x,y,z) or list of ranges (x-y,w-z): %', saveAge;
        RETURN;
    END IF;

    /* multiply postnatal values according to time unit */

    IF stem = 'postnatal' THEN

        IF timeUnit = 'day' THEN
            v_ageMin := minValue + 21.01;
            v_ageMax := maxValue + 21.01;

        ELSEIF timeUnit = 'week' THEN
            v_ageMin := minValue * 7 + 21.01;
            v_ageMax := maxValue * 7 + 21.01;

        ELSEIF timeUnit = 'month' THEN
            v_ageMin := minValue * 30 + 21.01;
            v_ageMax := maxValue * 30 + 21.01;

        ELSEIF timeUnit = 'year' THEN
            v_ageMin := minValue * 365 + 21.01;
            v_ageMax := maxValue * 365 + 21.01;
        END IF;

    ELSE
        v_ageMin := minValue;
        v_ageMax := maxValue;
    END IF;

END IF; -- final

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION PRB_ageMinMax(varchar) TO public;

COMMENT ON FUNCTION mgd.PRB_ageMinMax(varchar) IS '';

EOSQL
