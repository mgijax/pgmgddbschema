#!/bin/sh

#
#
# History
#
# 10/14/2014 	sc
#	- TR11674 - HDP-2 project
#	- prevent merge if marker cross referenced in MGI_Relationship
#
# 12/12/2013	lec
#	- TR11515/high throughput part 2/allele stuff
#	- change call to ALL_insertAllele for recent schema changes
#
# 08/19/2010    lec
#       - TR10317; remove allele/cellline edits
#
# 12/09/2004	lec
#	- TR 5686
#
# 06/30/2004	lec
#	- TR 5998
#
# lec	08/26/2003
#	- TR 4708
#
# lec	05/09/2003
#	- TR 4587; move Marker Detail Clip over during merge
#
# lec	04/08/2002
#	- TR 3550; MRK_mergeWithdrawal; change call to ALL_insertAllele
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MRK_mergeWithdrawal_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MRK_mergeWithdrawal (
v_oldKey int,
v_newKey int,
v_refKey int,
v_eventKey int,
v_eventReasonKey int,
v_addAsSynonym int DEFAULT 1
)
RETURNS VOID AS
\$\$

DECLARE
v_modifiedByKey int;
v_alleleOf int;
v_assigningRefKey int;
v_synTypeKey int;
v_oldSymbol mrk_marker.symbol%TYPE;
v_oldName mrk_marker.name%TYPE;
v_newSymbol mrk_marker.symbol%TYPE;
v_newChr mrk_marker.chromosome%TYPE;
v_withdrawnName mrk_marker.name%TYPE;
v_alleleSymbol all_allele.symbol%TYPE;

BEGIN

--
-- This procedure will process a merge marker withdrawal.
-- A merge withdrawal is a withdrawal where both the "old" and "new"
-- markers already exist in the database.
--
-- A merge marker withdrawal requires:
--	a) the "old" marker key
--	b) the "new" marker key
--	c) the reference key
--	d) the event key
--	e) the event reason key
--	f) the "add as synonym" flag
--
--

IF v_oldKey = v_newKey
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Cannot Merge a Symbol into itself: %, %', v_oldKey, v_newKey;
	RETURN;
END IF;

v_modifiedByKey := _User_key from MGI_User where login = current_user;

CREATE TEMP TABLE mrk_tmp ON COMMIT DROP
AS SELECT symbol as v_oldSymbol,
       name as v_oldName
FROM MRK_Marker 
WHERE _Marker_key = v_oldKey
     AND _Organism_key = 1
     AND _Marker_Status_key in (1,3)
;

IF (SELECT count(*) FROM mrk_tmp) = 0
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Invalid Old Symbol Key %', v_oldKey;
	RETURN;
END IF;

v_newSymbol := (
	SELECT symbol
	FROM MRK_Marker 
	WHERE _Marker_key = v_newKey
     	AND _Organism_key = 1
     	AND _Marker_Status_key in (1,3)
	);

IF v_newSymbol IS NULL
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Invalid New Symbol Key %', v_newKey;
	RETURN;
END IF;

-- Prevent the merge if the a Marker Detail Clip exists for both symbols

IF EXISTS (SELECT 1 FROM MRK_Notes WHERE _Marker_key = v_oldKey) AND
   EXISTS (SELECT 1 FROM MRK_Notes WHERE _Marker_key = v_newKey)
THEN
        RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Cannot Merge:  both Symbols contain a Marker Detail Clip.';
        RETURN;
END IF;

-- Else, continue....

if v_eventKey = 4
THEN
	v_withdrawnName := 'withdrawn, allele of ' || v_newSymbol;
	v_alleleOf := 1;
ELSE
	v_withdrawnName := 'withdrawn, = ' || v_newSymbol;
	v_alleleOf := 0;
END IF;

-- If new symbol has a chromosome of UN, update the new symbol's chromosome value
-- with the old symbol chromosome value

IF (SELECT chromosome FROM MRK_Marker WHERE _Marker_key = v_newKey) = 'UN'
THEN
	v_newChr := (SELECT chromosome FROM MRK_Marker WHERE _Marker_key = v_oldKey);

	UPDATE MRK_Marker 
	SET chromosome = v_newChr, _ModifiedBy_key = v_modifiedByKey, modification_date = current_date
	WHERE _Marker_key = v_newKey
	;

	IF NOT FOUND
	THEN
		RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update new symbol/chromosome';
		RETURN;
	END IF;
END IF;

-- Update offset values of new symbol

PERFORM MRK_updateOffset (v_oldKey, v_newKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update offset values';
	RETURN;
END IF;

-- Update MGD offset of old symbol

UPDATE MRK_Offset 
SET cmoffset = -999.0 
WHERE _Marker_key = v_oldKey 
AND source = 0
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update offset of old symbol : %', v_oldKey;
	RETURN;
END IF;

-- Delete remaining offsets of old symbol

DELETE FROM MRK_Offset WHERE _Marker_key = v_oldKey AND source > 0;

-- Update name/cytogenetic offset of old symbol

UPDATE MRK_Marker 
SET name = v_withdrawnName, cytogeneticOffset = null, _Marker_Status_key = 2, 
	_ModifiedBy_key = v_modifiedByKey, modification_date = current_date
WHERE _Marker_key = v_oldKey
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update name of old symbol : %', v_oldKey;
	RETURN;
END IF;

-- Merge potential duplicate wild type alleles of old and new symbols
-- before converting oldsymbol alleles

PERFORM ALL_mergeWildTypes (v_oldKey, v_newKey, v_oldSymbol, v_newSymbol);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not merge wild type alleles';
	RETURN;
END IF;

-- Convert Remaining Alleles

PERFORM ALL_convertAllele (v_oldKey, v_oldSymbol, v_newSymbol, v_alleleOf);

--IF NOT FOUND
--THEN
--	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not convert alleles';
--	RETURN;
--END IF;

IF v_alleleOf = 1
THEN
	-- If no alleles exist for the old symbol, create a newSymbol<oldSymbol> allele

	IF NOT EXISTS (SELECT 1 FROM ALL_Allele WHERE _Marker_key = v_oldKey)
	THEN
		v_alleleSymbol := v_newSymbol || '<' || v_oldSymbol + '>';

		PERFORM ALL_insertAllele (v_newKey, v_refKey, v_alleleSymbol, 0, v_oldName, null, null, null, null,
			-1, 'Not Specified', 'Not Specified', 'Approved', v_oldSymbol);

		IF NOT FOUND
		THEN
			RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not insert allele';
			RETURN;
		END IF;
	END IF;
END IF;

-- Merge Marker Feature Relationships (MGI_Relationship)

PERFORM MGI_mergeRelationship (v_oldKey, v_newKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not merge Marker Feature Relationships';
	RETURN;
END IF;

-- Update current symbols

UPDATE MRK_Current 
SET _Current_key = v_newKey 
WHERE _Current_key = v_oldKey
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update current symbols';
	RETURN;
END IF;

-- Copy History records from old symbol to new symbol

PERFORM MRK_copyHistory (v_oldKey, v_newKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not copy history records';
	RETURN;
END IF;

-- Insert history record for withdrawal

PERFORM MRK_insertHistory (v_newKey, v_oldKey, v_refKey, v_eventKey, v_eventReasonKey, v_oldName);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not create history record';
	RETURN;
END IF;

-- Remove history records from old symbol

DELETE FROM MRK_History WHERE _Marker_key = v_oldKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not delete obsolete history records';
	RETURN;
END IF;

-- Insert withdrawn symbol into Synonym table
-- Use assigning reference
IF v_addAsSynonym = 1
THEN
	v_assigningRefKey := (
		SELECT DISTINCT _Refs_key 
		FROM MRK_History_View
		WHERE _Marker_key = v_newKey
		AND history = v_oldSymbol
		AND _Marker_Event_key = 1
		);

	-- If oldSymbol is a Riken symbol (ends with 'Rik'), 
	-- then synonym type = 'similar' else synonym type = 'exact'

	IF EXISTS (SELECT 1
		   FROM MRK_Marker 
                   WHERE _Marker_key = v_oldKey
                        AND _Organism_key = 1
                        AND _Marker_Status_key in (1,3)
		        AND symbol like '%Rik'
		   )
	THEN
	    v_synTypeKey := 1005;
        ELSE
	    v_synTypeKey := 1004;
        END IF;

	PERFORM MGI_insertSynonym (v_newKey, 2, v_synTypeKey, v_oldSymbol, v_assigningRefKey);

	IF NOT FOUND
	THEN
		RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not add synonym';
		RETURN;
	END IF;
END IF;

-- Update keys from old key to new key

PERFORM MRK_updateKeys (v_oldKey, v_newKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_mergeWithdrawal: Could not update keys';
	RETURN;
END IF;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_mergeWithdrawal(int,int,int,int,int,int) TO public;

COMMENT ON FUNCTION mgd.MRK_mergeWithdrawal(int, int,int,int,int,int) IS 'process a merge withdrawal';

EOSQL
