#!/bin/sh

#
# History
#
# lec	05/24/2017
#       - TR12240/12083/varchar to text
#
# lec	05/09/2016
#	- add verification check for v_nextACC
#
# sc	01/21/2015
#	-TR12057; RR IDs for genotypes
#
# lec	01/18/2006
#	- TR 7182; increased prefixPart to 30
#
# lec 03/18/2003
#	- SAO
#
# lec 09/26/2001
#	- TR 2541; add "v_private" parameter
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/ACC_assignMGI_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION ACC_assignMGI (
  v_userKey int,
  v_objectKey int,
  v_mgiType acc_mgitype.name%TYPE,
  v_prefixPart acc_accession.prefixpart%TYPE DEFAULT 'MGI:',
  v_nextMGI int DEFAULT -1
)
RETURNS VOID AS
\$\$

DECLARE
v_nextACC int;
v_mgiTypeKey int;
v_accID acc_accession.accid%TYPE;
v_rrID acc_accession.accid%TYPE;
v_preferred int = 1;
v_private int = 0;

BEGIN

--
-- NAME: ACC_assignMGI
--
-- DESCRIPTION:
--        
-- To assign a new MGI id (MGI:xxxx) or new J (J:xxxx)
-- Add RRID for Genotypes objects (_MGIType_key = 12)
-- Increment ACC_AccessionMax.maxNumericPart
--
-- INPUT:
--      
-- v_userKey                        : MGI_User._User_key
-- v_objectKey                      : ACC_Accession._Object_key
-- v_mgiType acc_mgitype.name%TYPE  : ACC_Accession._MGIType_key (MGI: or J:)
-- v_prefixPart acc_accession.prefixpart%TYPE : ACC_Accession.prefixPart
--		The default is 'MGI:', but 'J:' is also valid
-- v_nextMGI int DEFAULT -1 : if -1 then use next available MGI id
--		this sp does not allow an override of a generated MGI accession id
-- RETURNS:
--	VOID
--      

v_nextACC := max(_Accession_key) + 1 FROM ACC_Accession;
v_mgiTypeKey := _MGIType_key FROM ACC_MGIType WHERE name = v_mgiType;

IF v_nextMGI = -1
THEN
	SELECT INTO v_nextMGI maxNumericPart + 1
	FROM ACC_AccessionMax WHERE prefixPart = v_prefixPart;
ELSIF v_prefixPart != 'J:'
THEN
    RAISE EXCEPTION E'Cannot override generation of MGI accession number';
    RETURN;
END IF;

-- check if v_nextACC already exists in ACC_Accession table
--IF (SELECT count(*) FROM ACC_Accession
--    WHERE _MGIType_key = v_mgiTypeKey
--    AND prefixPart = v_prefixPart
--    AND numericPart = v_nextACC) > 0
--THEN
--    RAISE EXCEPTION 'v_nextMGI already exists in ACC_Accession: %', v_nextMGI;
--    RETURN;
--END IF;

v_accID := v_prefixPart || v_nextMGI::char(30);

INSERT INTO ACC_Accession 
(_Accession_key, accID, prefixPart, numericPart, 
_LogicalDB_key, _Object_key, _MGIType_key, preferred, private, 
_CreatedBy_key, _ModifiedBy_key)
VALUES(v_nextACC, v_accID, v_prefixPart, v_nextMGI, 1, v_objectKey, 
v_mgiTypeKey, v_preferred, v_private, v_userKey, v_userKey);

IF (SELECT maxNumericPart FROM ACC_AccessionMax
    WHERE prefixPart = v_prefixPart) <= v_nextMGI
THEN
	UPDATE ACC_AccessionMax 
	SET maxNumericPart = v_nextMGI 
	WHERE prefixPart = v_prefixPart;
END IF;

--
-- add RRID for Genotypes
--
IF v_mgiTypeKey = 12
THEN
    v_nextACC := max(_Accession_key) + 1 FROM ACC_Accession;
    v_rrID := 'RRID:' || v_accID::char(30); 
    INSERT INTO ACC_Accession
	(_Accession_key, accID, prefixPart, numericPart,
	_LogicalDB_key, _Object_key, _MGIType_key, preferred, private,
	_CreatedBy_key, _ModifiedBy_key)
	VALUES(v_nextACC, v_rrID, v_prefixPart, v_nextMGI, 179, v_objectKey,
	v_mgiTypeKey, v_preferred, v_private, v_userKey, v_userKey);
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ACC_assignMGI(int,int,text,text,int) TO public;

COMMENT ON FUNCTION mgd.ACC_assignMGI(int,int,text,text,int) IS 'creates a new MGI id in the acc_accession table';

EOSQL

