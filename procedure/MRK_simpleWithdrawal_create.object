#!/bin/sh

#
# History
#
# 01/08/2015    lec
#       - TR11750/removed call to NOM_updateReserved() (obsolete)
#
# 04/30/2014	lec
#	- TR 11641/always use synonym type 'exact'
#
# 12/09/2004	lec
#	- TR 5686
#
# 08/20/2004	lec
#	- create wild type allele for new gene
#
# 06/30/2004	lec
#	- TR 5998
#
# 06/30/2004	lec
#	- TR 5998
#
# lec	08/26/2003
#	- TR 4708
#
# 10/04/2002 lec
#	- TR 3588 - delete created wild type allele from new marker
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MRK_simpleWithdrawal_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MRK_simpleWithdrawal (
v_userKey int,
v_oldKey int,
v_refsKey int,
v_eventReasonKey int,
v_newSymbol mrk_marker.symbol%TYPE,
v_newName mrk_marker.name%TYPE,
v_addAsSynonym int DEFAULT 1
)
RETURNS VOID AS
\$\$

DECLARE
v_newKey int;
v_withdrawnName mrk_marker.name%TYPE;
v_savesymbol mrk_marker.symbol%TYPE;

BEGIN

--
-- This procedure will process a simple marker withdrawal.
-- A simple marker withdrawal requires:
--	a) the "old" marker key
--	b) the reference key
--	c) the event reason key
--	c) the "new" marker symbol which does not already exist
--	d) the "new" marker name
--	e) the "add as synonym" flag
-- 
--  Since the server is not case-sensitive, the caller is
--  responsible for making sure the new symbol is unique and correct.
-- 

v_withdrawnName := 'withdrawn, = ' || v_newSymbol;
v_newKey := max(_Marker_key) + 1 from MRK_Marker;

CREATE TEMP TABLE mrk_tmp ON COMMIT DROP
AS SELECT distinct m.symbol as oldSymbol, m.name as oldName, h._Refs_key as assigningRefKey
FROM MRK_Marker m, MRK_History h
WHERE m._Organism_key = 1
     AND m._Marker_Status_key = 1
     AND m._Marker_key = v_oldKey 
     AND m._Marker_key = h._Marker_key
     AND h._History_key = v_oldKey
     AND h._Marker_Event_key = 1
;

-- Check for duplicates; exclude cytogenetic markers

IF EXISTS (SELECT * FROM MRK_Marker 
	WHERE _Organism_key = 1 
	AND _Marker_Status_key = 1
	AND _Marker_Type_key != 3
	AND symbol = v_newSymbol)
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Duplicate Symbol (%)', v_newSymbol;
	RETURN;
END IF;

v_savesymbol := symbol FROM MRK_Marker WHERE _Marker_key = v_oldKey;

-- Create a new marker record using the old marker record as the template
INSERT INTO MRK_Marker 
(_Marker_key, _Organism_key, _Marker_Type_key, _Marker_Status_key, symbol, name, chromosome, cmOffset, _CreatedBy_key, _ModifiedBy_key)
SELECT v_newKey, _Organism_key, _Marker_Type_key, 2, symbol||'_tmp', v_withdrawnName, chromosome, cmOffset, v_userKey, v_userKey
FROM MRK_Marker
WHERE _Marker_key = v_oldKey
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not add marker (%)', v_newSymbol;
	RETURN;
END IF;

-- Update the Current marker of the new marker

UPDATE MRK_Current 
SET _Current_key = v_oldKey 
WHERE _Current_key = v_newKey;

-- handled by trigger
--INSERT INTO MRK_Current VALUES (v_oldKey, v_newKey, now(), now());

-- Update old marker record with new symbol and name values
UPDATE MRK_Marker 
SET symbol = v_newSymbol, name = v_newName, _ModifiedBy_key = v_userKey, modification_date = now()
WHERE _Marker_key = v_oldKey;

-- Update old marker record with old symbol (remove '_tmp')
UPDATE MRK_Marker 
SET symbol = v_savesymbol
WHERE _Marker_key = v_newKey;

-- Update history lines
UPDATE MRK_History 
SET _History_key = v_newKey 
WHERE _Marker_key = v_oldKey 
AND _History_key = v_oldKey;

-- Add History line for withdrawal
PERFORM MRK_insertHistory (v_userKey, v_oldKey, v_newKey, v_refsKey, 2, v_eventReasonKey, 
	(select oldName from mrk_tmp));

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not add history (withdrawal)';
	RETURN;
END IF;

-- Add History line for assignment
PERFORM MRK_insertHistory (v_userKey, v_oldKey, v_oldKey, v_refsKey, 1, v_eventReasonKey, v_newName);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not add history (assignment)';
	RETURN;
END IF;

-- If marker type = 'gene' (1) and no wild type allele exists for new symbol, create it

--IF (SELECT _Marker_Type_key FROM MRK_Marker WHERE _Marker_key = v_newKey) = 1
	--AND NOT EXISTS (SELECT 1 FROM ALL_Allele WHERE _Marker_key = v_oldKey AND isWildType = 1)
--THEN
	--PERFORM ALL_createWildType (v_userKey, v_oldKey, v_newSymbol);

	--IF NOT FOUND
	--THEN
		--RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not add wild type allele';
		--RETURN;
	--END IF;
--END IF;

-- Convert Alleles, if necessary

PERFORM ALL_convertAllele (v_userKey, v_oldKey, (select oldSymbol from mrk_tmp), v_newSymbol);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not call ALL_convertAllele';
	RETURN;
END IF;

-- Insert withdrawn symbol into Synonym table
-- Use assigning reference

IF v_addAsSynonym = 1
THEN
	PERFORM MGI_insertSynonym (v_userKey, v_oldKey, 2, 1004, 
		(select oldSymbol from mrk_tmp), 
		(select assigningRefKey from mrk_tmp));

	IF NOT FOUND
	THEN
		RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not add synonym';
		RETURN;
	END IF;
END IF;

-- Update needsReview flag for strains
PERFORM PRB_setStrainReview (v_oldKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'\nMRK_simpleWithdrawal: Could not flag Strain record for needing review';
	RETURN;
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_simpleWithdrawal(int,int,int,int,text,text,int) TO public;

COMMENT ON FUNCTION mgd.MRK_simpleWithdrawal(int,int,int,int,text,text,int) IS 'process a simple marker withdrawal';

EOSQL
