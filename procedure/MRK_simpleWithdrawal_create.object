#!/bin/sh

#
# History
#
# 01/08/2015    lec
#       - TR11750/removed call to NOM_updateReserved() (obsolete)
#
# 04/30/2014	lec
#	- TR 11641/always use synonym type 'exact'
#
# 12/09/2004	lec
#	- TR 5686
#
# 08/20/2004	lec
#	- create wild type allele for new gene
#
# 06/30/2004	lec
#	- TR 5998
#
# 06/30/2004	lec
#	- TR 5998
#
# lec	08/26/2003
#	- TR 4708
#
# 10/04/2002 lec
#	- TR 3588 - delete created wild type allele from new marker
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION MRK_simpleWithdrawal(int,int,int,varchar,text,int);

CREATE OR REPLACE FUNCTION MRK_simpleWithdrawal (
v_oldKey int,
v_refKey int,
v_eventReasonKey int,
v_newSymbol mrk_marker.symbol%TYPE,
v_newName mrk_marker.name%TYPE,
v_addAsSynonym int DEFAULT 1
)
RETURNS VOID AS
\$\$

DECLARE
v_modifiedByKey int;
v_curationStateKey int;
v_newKey int;
v_oldSymbol mrk_marker.symbol%TYPE;
v_oldName mrk_marker.name%TYPE;
v_withdrawnName mrk_marker.name%TYPE;

BEGIN

/*
 * This procedure will process a simple marker withdrawal.
 * A simple marker withdrawal requires:
 *	a) the "old" marker key
 *	b) the reference key
 *	c) the event reason key
 *	c) the "new" marker symbol which does not already exist
 *	d) the "new" marker name
 *	e) the "add as synonym" flag
 *
 * Since the server is not case-sensitive, the caller is
 * responsible for making sure the new symbol is unique and correct.
 *
*/

v_modifiedByKey := _User_key from MGI_User where login = current_user;
v_curationStateKey := _Term_key from VOC_Term where _Vocab_key = 15 and term = 'Internal';
v_withdrawnName := 'withdrawn, = ' + v_newSymbol;
v_newKey := max(_Marker_key) + 1 from MRK_Marker;

DROP TABLE IF EXISTS mrk_tmp;

CREATE TEMP TABLE mrk_tmp ON COMMIT DROP
AS SELECT symbol as v_oldSymbol, name as v_oldName
FROM MRK_Marker WHERE _Marker_key = v_oldKey 
     AND _Organism_key = 1
     AND _Marker_Status_key in (1,3)
;

/* Check for duplicates; exclude cytogenetic markers */

IF EXISTS (SELECT * FROM MRK_Marker 
	WHERE _Organism_key = 1 
	AND _Marker_Status_key in (1,3)
	AND _Marker_Type_key != 3
	AND symbol = v_newSymbol)
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Duplicate Symbol (%)', v_newSymbol;
	RETURN;
END IF;

/* Create a new marker record using the old marker record as the template */

INSERT INTO MRK_Marker 
(_Marker_key, _Organism_key, _Marker_Type_key, _Marker_Status_key, _CurationState_key, symbol, name, chromosome, _CreatedBy_key, _ModifiedBy_key)
SELECT v_newKey, _Organism_key, _Marker_Type_key, 2, v_curationStateKey, symbol, v_withdrawnName, chromosome, v_modifiedByKey, v_modifiedByKey
FROM MRK_Marker
WHERE _Marker_key = v_oldKey
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add marker (%)', v_newSymbol;
	RETURN;
END IF;

/* Remove Wild Type Allele (if one was created) from new Marker object */
DELETE FROM ALL_Allele WHERE _Marker_key = v_newKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not delete wild type allele';
	RETURN;
END IF;

/* Create Offset for new marker */
INSERT INTO MRK_Offset values(v_newKey, 0, -999.0, current_date, current_date);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add offset';
	RETURN;
END IF;

/* Update the Current marker of the new marker */
UPDATE MRK_Current 
SET _Current_key = v_oldKey 
WHERE _Marker_key = v_newKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not update current';
	RETURN;
END IF;

/* Update old marker record with new symbol and name values */
UPDATE MRK_Marker 
SET symbol = v_newSymbol, name = v_newName, _ModifiedBy_key = v_modifiedByKey, modification_date = current_date
WHERE _Marker_key = v_oldKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not update marker';
	RETURN;
END IF;

/* Update history lines */
UPDATE MRK_History 
SET _History_key = v_newKey 
WHERE _Marker_key = v_oldKey AND _History_key = v_oldKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not update history';
	RETURN;
END IF;

/* Add History line for withdrawal */
--exec MRK_insertHistory v_oldKey, v_newKey, v_refKey, 2, v_eventReasonKey, v_oldName

--IF NOT FOUND
--THEN
	--RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add history (withdrawal)';
	--RETURN;
--END IF;

/* Add History line for assignment */
--exec MRK_insertHistory v_oldKey, v_oldKey, v_refKey, 1, v_eventReasonKey, v_newName

--IF NOT FOUND
--THEN
	--RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add history (assignment)';
	--RETURN;
--END IF;

/* If no wild type allele exists for new symbol, create it */

--IF (SELECT _Marker_Type_key FROM MRK_Marker WHERE _Marker_key = v_newKey) = 1
--AND not exists (SELECT 1 FROM ALL_Allele WHERE _Marker_key = v_oldKey AND isWildType = 1)
--THEN
	--exec ALL_createWildType v_oldKey, v_newSymbol

	--IF NOT FOUND
	--THEN
		--RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add wild type allele';
		--RETURN;
	--END IF;
--END IF;

/* Insert withdrawn symbol into Synonym table */
/* Use assigning reference */
--IF v_addAsSynonym = 1
--THEN
--	declare v_assigningRefKey int
--	SELECT distinct v_assigningRefKey = _Refs_key FROM MRK_History_View
--		WHERE _Marker_key = v_oldKey
--		AND history = v_oldSymbol
--		AND _Marker_Event_key = 1
--
--	declare v_synTypeKey int
--
--	SELECT v_synTypeKey = _SynonymType_key FROM MGI_SynonymType 
--		WHERE _MGIType_key = 2 
--		AND _Organism_key = 1
--		AND synonymType = 'exact'

	--exec MGI_insertSynonym v_oldKey, 2, v_synTypeKey, v_oldSymbol, v_assigningRefKey

	--IF NOT FOUND
	--THEN
		--RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add synonym';
		--RETURN;
	--END IF;
--END IF;

/* Update needsReview flag for strains */
--exec PRB_setStrainReview v_oldKey

--IF NOT FOUND
--THEN
	--RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not flag Strain record for needing review';
	--RETURN;
--END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_simpleWithdrawal(int,int,int,varchar,text,int) TO public;

COMMENT ON FUNCTION mgd.MRK_simpleWithdrawal(int,int,int,varchar,text,int) IS '';

EOSQL
