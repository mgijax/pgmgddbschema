#!/bin/sh

#
# History
#
# 01/08/2015    lec
#       - TR11750/removed call to NOM_updateReserved() (obsolete)
#
# 04/30/2014	lec
#	- TR 11641/always use synonym type 'exact'
#
# 12/09/2004	lec
#	- TR 5686
#
# 08/20/2004	lec
#	- create wild type allele for new gene
#
# 06/30/2004	lec
#	- TR 5998
#
# 06/30/2004	lec
#	- TR 5998
#
# lec	08/26/2003
#	- TR 4708
#
# 10/04/2002 lec
#	- TR 3588 - delete created wild type allele from new marker
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION MRK_simpleWithdrawal(int,int,int,varchar,varchar,int);

CREATE OR REPLACE FUNCTION MRK_simpleWithdrawal (
v_oldKey int,
v_refKey int,
v_eventReasonKey int,
v_newSymbol mrk_marker.symbol%TYPE,
v_newName mrk_marker.name%TYPE,
v_addAsSynonym int DEFAULT 1
)
RETURNS VOID AS
\$\$

DECLARE
v_modifiedByKey int;
v_curationStateKey int;
v_newKey int;
v_oldSymbol mrk_marker.symbol%TYPE;
v_oldName mrk_marker.name%TYPE;
v_withdrawnName mrk_marker.name%TYPE;

BEGIN

/*
 * This procedure will process a simple marker withdrawal.
 * A simple marker withdrawal requires:
 *	a) the "old" marker key
 *	b) the reference key
 *	c) the event reason key
 *	c) the "new" marker symbol which does not already exist
 *	d) the "new" marker name
 *	e) the "add as synonym" flag
 *
 * Since the server is not case-sensitive, the caller is
 * responsible for making sure the new symbol is unique and correct.
 *
*/

v_modifiedByKey := _User_key from MGI_User where login = current_user;
v_curationStateKey := _Term_key from VOC_Term where _Vocab_key = 15 and term = 'Internal';
v_withdrawnName := 'withdrawn, = ' + v_newSymbol;
v_newKey := max(_Marker_key) + 1 from MRK_Marker;

select v_oldSymbol = symbol,
       v_oldName = name 
from MRK_Marker where _Marker_key = v_oldKey 
     and _Organism_key = 1
     and _Marker_Status_key in (1,3)

IF v_oldSymbol IS NULL
THEN
	RAISE EXCEPTION E'Invalid Old Symbol Key %', v_oldKey;
	RETURN;
END IF;

/* Check for duplicates; exclude cytogenetic markers */

IF EXISTS (select * from MRK_Marker 
	where _Organism_key = 1 
	and _Marker_Status_key in (1,3)
	and _Marker_Type_key != 3
	and symbol = v_newSymbol)
THEN
	RAISE EXCEPTION E'Duplicate Symbol %', v_newSymbol;
	RETURN;
END IF;

/* Create a new marker record using the old marker record as the template */

INSERT INTO MRK_Marker 
(_Marker_key, _Organism_key, _Marker_Type_key, _Marker_Status_key, _CurationState_key, symbol, name, chromosome, _CreatedBy_key, _ModifiedBy_key)
select v_newKey, _Organism_key, _Marker_Type_key, 2, v_curationStateKey, symbol, v_withdrawnName, chromosome, v_modifiedByKey, v_modifiedByKey
FROM MRK_Marker
WHERE _Marker_key = v_oldKey
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add marker';
	RETURN;
END;

/* Remove Wild Type Allele (if one was created) from new Marker object */
DELETE FROM ALL_Allele WHERE _Marker_key = v_newKey;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not delete wild type allele';
	RETURN;
END;

/* Create Offset for new marker */
INSERT INTO MRK_Offset values(v_newKey, 0, -999.0, current_date, current_date);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'MRK_simpleWithdrawal: Could not add offset';
	RETURN;
END;

/* Update the Current marker of the new marker */
update MRK_Current set _Current_key = v_oldKey where _Marker_key = v_newKey

if v_v_error != 0
begin
	raiserror 99999 "Could not update current in MRK_simpleWithdrawal"
	rollback transaction
	return
end

/* Update old marker record with new symbol and name values */
update MRK_Marker 
set symbol = v_newSymbol, name = v_newName, _ModifiedBy_key = v_modifiedByKey, modification_date = current_date
where _Marker_key = v_oldKey

if v_v_error != 0
begin
	raiserror 99999 "Could not update marker in MRK_simpleWithdrawal"
	rollback transaction
	return
end

/* Update history lines */
update MRK_History set _History_key = v_newKey where _Marker_key = v_oldKey
and _History_key = v_oldKey

if v_v_error != 0
begin
	raiserror 99999 "Could not update history in MRK_simpleWithdrawal"
	rollback transaction
	return
end

/* Add History line for withdrawal */
exec MRK_insertHistory v_oldKey, v_newKey, v_refKey, 2, v_eventReasonKey, v_oldName

if v_v_error != 0
begin
	raiserror 99999 "Could not add history in MRK_simpleWithdrawal"
	rollback transaction
	return
end

/* Add History line for assignment */
exec MRK_insertHistory v_oldKey, v_oldKey, v_refKey, 1, v_eventReasonKey, v_newName

if v_v_error != 0
begin
	raiserror 99999 "Could not add history in MRK_simpleWithdrawal"
	rollback transaction
	return
end

/* If no wild type allele exists for new symbol, create it */

if (select _Marker_Type_key from MRK_Marker where _Marker_key = v_newKey) = 1
and not exists (select 1 from ALL_Allele where _Marker_key = v_oldKey and isWildType = 1)
begin
	exec ALL_createWildType v_oldKey, v_newSymbol

	if v_v_error != 0
	begin
		raiserror 99999 "Could not add wild type allele in MRK_simpleWithdrawal"
		rollback transaction
		return
	end
end

/* Insert withdrawn symbol into Synonym table */
/* Use assigning reference */
if v_addAsSynonym = 1
begin
	declare v_assigningRefKey int
	select distinct v_assigningRefKey = _Refs_key from MRK_History_View
		where _Marker_key = v_oldKey
		and history = v_oldSymbol
		and _Marker_Event_key = 1

	declare v_synTypeKey int

	select v_synTypeKey = _SynonymType_key from MGI_SynonymType 
		where _MGIType_key = 2 
		and _Organism_key = 1
		and synonymType = 'exact'

	exec MGI_insertSynonym v_oldKey, 2, v_synTypeKey, v_oldSymbol, v_assigningRefKey

	if v_v_error != 0
	begin
		raiserror 99999 "Could not add synonym in MRK_simpleWithdrawal"
		rollback transaction
		return
	end
end

/* Update needsReview flag for strains */
exec PRB_setStrainReview v_oldKey

if v_v_error != 0
begin
        raiserror 99999 "Could not flag Strain record for needing review"
        rollback transaction
        return
end

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_simpleWithdrawal(int,int,int,varchar,varchar,int) TO public;

COMMENT ON FUNCTION mgd.MRK_simpleWithdrawal(int,int,int,varchar,varchar,int) IS '';

EOSQL
