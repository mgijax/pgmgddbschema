#!/bin/sh

# 
# HISTORY:
#
# 12/08/2015    lec 
#       - add drop commands as comments only
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/VOC_processAnnotHeader_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION VOC_processAnnotHeader (
v_userKey int,
v_annotTypeKey int,
v_objectKey int,
v_reorder smallint DEFAULT 1
)
RETURNS VOID AS
\$\$

-- generate set of Header Terms based on Annotations of object/mgi type
-- test data: 1002, 11216

DECLARE
v_headerLabel int;
v_headerKey int;
v_maxSeq int;
v_pkey int;	-- primary key of records to update
v_oldSeq int;	-- current sequence number
v_newSeq int;	-- new sequence number

BEGIN

v_headerLabel := _Label_key FROM DAG_Label WHERE label = 'Header';
v_headerKey := max(_AnnotHeader_key) FROM VOC_AnnotHeader;
v_maxSeq := 0;

-- set of "new" headers based on most recent annotation update 
-- need to check if any ancestors are header terms 
-- and if the annotated term is itself a header term 

CREATE TEMP TABLE set0 ON COMMIT DROP
AS (SELECT DISTINCT h._Term_key, h.sequenceNum, a._Qualifier_key, 0 as isNormal
FROM VOC_Annot a, VOC_Term t, VOC_VocabDAG vd, DAG_Node d, DAG_Closure dc, DAG_Node dh, VOC_Term h
WHERE a._AnnotType_key = v_annotTypeKey
AND a._Object_key = v_objectKey
AND a._Term_key = t._Term_key
AND t._Vocab_key = vd._Vocab_key
AND vd._DAG_key = d._DAG_key
AND t._Term_key = d._Object_key
AND d._Node_key = dc._Descendent_key
AND dc._Ancestor_key = dh._Node_key
AND dh._Label_key = v_headerLabel
AND dh._Object_key = h._Term_key
UNION
SELECT DISTINCT h._Term_key, h.sequenceNum, a._Qualifier_key, 0 as isNormal
FROM VOC_Annot a, VOC_Term t, VOC_VocabDAG vd, DAG_Node d, DAG_Closure dc, DAG_Node dh, VOC_Term h
WHERE a._AnnotType_key = v_annotTypeKey
AND a._Object_key = v_objectKey
AND a._Term_key = t._Term_key
AND t._Vocab_key = vd._Vocab_key
AND vd._DAG_key = d._DAG_key
AND t._Term_key = d._Object_key
AND d._Node_key = dc._Descendent_key
AND dc._Descendent_key = dh._Node_key
AND dh._Label_key = v_headerLabel
AND dh._Object_key = h._Term_key
)
ORDER BY sequenceNum
;

-- set isNormal
-- isNormal = 1 if all of the qualifiers for a given header term = 2181424
-- else isNormal = 0

UPDATE set0
SET isNormal = 1
FROM set0 s1
WHERE s1._Qualifier_key = 2181424
AND NOT EXISTS (SELECT 1 FROM set0 s2 WHERE s1._Term_key = s2._Term_key AND s2._Qualifier_key != 2181424)
;

-- now SELECT the DISTINCT headers

CREATE TEMP TABLE set1 ON COMMIT DROP
AS SELECT DISTINCT _Term_key, sequenceNum, isNormal
FROM set0
;

-- set of headers that are currently cached

CREATE TEMP TABLE set2 ON COMMIT DROP
AS SELECT _AnnotHeader_key, _Term_key, sequenceNum
FROM VOC_AnnotHeader 
WHERE _AnnotType_key = v_annotTypeKey AND _Object_key = v_objectKey
ORDER BY sequenceNum
;

-- any headers in set2 that is not in set1 are deleted

DELETE 
FROM VOC_AnnotHeader
USING set1, set2
WHERE set2._AnnotHeader_key = VOC_AnnotHeader._AnnotHeader_key
AND NOT EXISTS (SELECT 1 FROM set1 WHERE set2._Term_key = set1._Term_key)
;

-- set of headers that are currently cached after deletion

CREATE TEMP TABLE set3 ON COMMIT DROP
AS SELECT _Term_key, sequenceNum
FROM VOC_AnnotHeader 
WHERE _AnnotType_key = v_annotTypeKey AND _Object_key = v_objectKey
ORDER BY sequenceNum
;

-- any headers in set1 that are not in set3 are added

CREATE TEMP TABLE toAdd ON COMMIT DROP
AS SELECT row_number() over (order by s1.sequenceNum) as id, _Term_key, sequenceNum, isNormal
FROM set1 s1 
WHERE not exists (SELECT 1 FROM set3 s3 WHERE s1._Term_key = s3._Term_key)
ORDER BY s1.sequenceNum
;

-- update the isNormal for any headers in set1 that are in set3 (existing headers)
UPDATE VOC_AnnotHeader
SET isNormal = s1.isNormal
FROM set1 s1, set3 s3
WHERE VOC_AnnotHeader._AnnotType_key = v_annotTypeKey 
AND VOC_AnnotHeader._Object_key = v_objectKey
AND VOC_AnnotHeader._Term_key = s1._Term_key
AND s1._Term_key = s3._Term_key
;

INSERT INTO VOC_AnnotHeader 
SELECT v_headerKey + id, v_annotTypeKey, v_objectKey, _Term_key, v_maxSeq + id, isNormal,
	v_userKey, v_userKey, NULL, NULL, now(), now()
FROM toAdd
;

-- if there is only one Annotation header in the cache, the automatically approve it

IF (SELECT count(*) FROM VOC_AnnotHeader WHERE _AnnotType_key = v_annotTypeKey AND _Object_key = v_objectKey) = 1
THEN
    UPDATE VOC_AnnotHeader
    SET _ApprovedBy_key = v_userKey, approval_date = now()
    WHERE _AnnotType_key = v_annotTypeKey AND _Object_key = v_objectKey
    ;

-- else if there is at least one new header added to the cache, then set all headers to non-approved

ELSIF (SELECT count(*) FROM toAdd) >= 1
THEN
    UPDATE VOC_AnnotHeader
    SET _ApprovedBy_key = null, approval_date = null
    WHERE _AnnotType_key = v_annotTypeKey AND _Object_key = v_objectKey
    ;
END IF;

-- if we're updating the cache for a single object, then re-set the sequence numbers so there are no gaps

IF (v_reorder = 1)
THEN
    v_newSeq := 1;
    FOR v_pkey, v_oldSeq IN
    SELECT _AnnotHeader_key, sequenceNum
    FROM VOC_AnnotHeader
    WHERE _AnnotType_key = v_annotTypeKey 
    AND _Object_key = v_objectKey
    ORDER BY sequenceNum
    LOOP
        UPDATE VOC_AnnotHeader SET sequenceNum = v_newSeq WHERE _AnnotHeader_key = v_pkey;
        v_newSeq := v_newSeq + 1;
    END LOOP;
END IF;

DROP TABLE IF EXISTS set0;
DROP TABLE IF EXISTS set1;
DROP TABLE IF EXISTS set2;
DROP TABLE IF EXISTS set3;
DROP TABLE IF EXISTS toAdd;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_processAnnotHeader(int,int,int,smallint) TO public;

COMMENT ON FUNCTION mgd.VOC_processAnnotHeader(int,int,int,smallint) IS 'generate set of Header Terms based on Annotations of object/mgi type';

EOSQL
