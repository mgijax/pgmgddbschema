#!/bin/sh

#
# History
#
# 01/30/2014	lec
#	- TR 10841; remove obsolete mld_distance/mld_physmap
#
# 03/18/2009	lec
#	- TR 7493; add call to update allele/marker association
#
# 03/16/2006	lec
#	- TR 7530; removed MLD_Marker
#
# 11/16/2005	lec
#	- TR 7194; ALL_Knockout_Cache
#
# 12/09/2004	lec
#	- TR 5686; MRK_Other replaced by MGI_Synonym
#
# lec	06/17/2003
#	- TR 4902; added InterPro/Marker annotations
#
# lec	05/09/2003
#	- TR 4587; move Marker Detail Clip over during merge
#
# lec	01/23/2002
#	- TR 2867; added VOC_mergeAnnotations
#
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MRK_updateKeys_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MRK_updateKeys (
v_oldKey int,
v_newKey int
)
RETURNS VOID AS
\$\$

DECLARE
v_userKey int;

BEGIN

-- Executed during merge withdrawal process

--
-- Set the preferred bit to 0 for all MGI Acc# brought over from old symbol if
-- the new symbol already contains a preferred MGI Acc#.
-- Associate all Accession numbers w/ new symbol.
--

IF (SELECT count(*) 
    FROM ACC_Accession 
    WHERE _MGIType_key = 2 
	AND prefixPart = 'MGI:' 
	AND _LogicalDB_key = 1 
	AND _Object_key = v_newKey 
	AND preferred = 1) > 0
THEN
	UPDATE ACC_Accession 
	SET _Object_key = v_newKey, preferred = 0
	WHERE _LogicalDB_key = 1 
	AND _MGIType_key = 2 
	AND _Object_key = v_oldKey
	;
END IF;

--
-- remove any Accession records belonging to old marker
-- which already exist for new marker
-- that is, remove duplicates before updating keys
--

delete 
from ACC_Accession
using ACC_Accession new
where ACC_Accession._MGIType_key = 2
and ACC_Accession._Object_key = v_oldKey
and ACC_Accession.accID = new.accID
and ACC_Accession._LogicalDB_key = new._LogicalDB_key
and new._Object_key = v_newKey
and new._MGIType_key = 2
;

update ACC_Accession 
set _Object_key = v_newKey
where _MGIType_key = 2 and _Object_key = v_oldKey
;

-- Associate aliases, classes, other names, references w/ new symbol 

-- Remove reflexive Alias records, if they exist 

delete from MRK_Alias where _Marker_key = v_oldKey and _Alias_key = v_newKey ;
delete from MRK_Alias where _Alias_key = v_oldKey and _Marker_key = v_newKey ;

update MRK_Alias set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MRK_Alias set _Alias_key = v_newKey where _Alias_key = v_oldKey ;
update ALL_Allele set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update ALL_Marker_Assoc set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update ALL_Knockout_Cache set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MRK_Anchors set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MGI_Synonym set _Object_key = v_newKey where _MGIType_key = 2 and _Object_key = v_oldKey ;
update MRK_Notes set _Marker_key = v_newKey where _Marker_key = v_oldKey ;

-- MRK_Classes may contain potential duplicates 

insert into MRK_Classes
select v_newKey, m._Class_key, m.creation_date, m.modification_date
from MRK_Classes m
where m._Marker_key = v_oldKey
and not exists (select m2.* from MRK_Classes m2
where m2._Marker_key = v_newKey
and m2._Class_key = m._Class_key)
;

delete from MRK_Classes where _Marker_key = v_oldKey ;

-- Update all auxiliary references to old symbol w/ new symbol 

update CRS_Matrix set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update CRS_References set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update HMD_Homology_Marker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update GXD_AllelePair set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update GXD_AlleleGenotype set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update GXD_Assay set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update GXD_Expression set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update WKS_Rosetta set _Marker_key = v_newKey where _Marker_key = v_oldKey ;

-- GXD_AntibodyMarker may contain potential duplicates 

delete 
from GXD_AntibodyMarker
using GXD_AntibodyMarker p2
where GXD_AntibodyMarker._Marker_key = v_oldKey 
and GXD_AntibodyMarker._Antibody_key = p2._Antibody_key and p2._Marker_key = v_newKey
;

update GXD_AntibodyMarker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;

-- GXD_Index may contain potential duplicates 

IF EXISTS (select 1 from GXD_Index where _Marker_key = v_newKey)
THEN
    -- merge duplicate index stage data 

    update GXD_Index_Stages
    set _Index_key = n._Index_key
    from GXD_Index n, GXD_Index o, GXD_Index_Stages os
    where n._Marker_key = v_newKey
    and n._Refs_key = o._Refs_key
    and o._Marker_key = v_oldKey
    and o._Index_key = os._Index_key
    and not exists (select 1 from GXD_Index_Stages ns
    where n._Index_key = ns._Index_key
    and ns._IndexAssay_key = os._IndexAssay_key
    and ns._StageID_key = os._StageID_key)
    ;
    
    delete 
    from GXD_Index
    where exists (select 1 from GXD_Index n
    where n._Marker_key = v_newKey
    and n._Refs_key = GXD_Index._Refs_key
    and GXD_Index._Marker_key = v_oldKey)
    ;
END IF;

-- this handles non-duplicate updates 

update GXD_Index set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MLD_Expt_Marker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MLD_Concordance set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MLD_MC2point set _Marker_key_1 = v_newKey where _Marker_key_1 = v_oldKey ;
update MLD_MC2point set _Marker_key_2 = v_newKey where _Marker_key_2 = v_oldKey ;
update MLD_RI2Point set _Marker_key_1 = v_newKey where _Marker_key_1 = v_oldKey ;
update MLD_RI2Point set _Marker_key_2 = v_newKey where _Marker_key_2 = v_oldKey ;
update MLD_RIData set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update MLD_Statistics set _Marker_key_1 = v_newKey where _Marker_key_1 = v_oldKey ;
update MLD_Statistics set _Marker_key_2 = v_newKey where _Marker_key_2 = v_oldKey ;

--PERFORM PRB_setStrainreview (v_oldKey);
 
update PRB_Strain_Marker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;

-- PRB_Marker may contain potential duplicates 
delete 
from PRB_Marker
using PRB_Marker p2
where PRB_Marker._Marker_key = v_oldKey and
PRB_Marker._Probe_key = p2._Probe_key and
p2._Marker_key = v_newKey
;

update PRB_Marker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
update PRB_RFLV set _Marker_key = v_newKey where _Marker_key = v_oldKey ;

-- Update MLC cross references to oldKey 

update MLC_Marker set _Marker_key_2 = v_newKey where _Marker_key_2 = v_oldKey ;

-- Update MLC entry iff New Symbol entry doesn't exist in MLC 
-- Nomenclature updates are propagated to the non-edit tables immediately 

IF not exists (select * from MLC_Marker where _Marker_key = v_newKey)
   and not exists (select * from MLC_Text where _Marker_key = v_newKey)
THEN
  update MLC_Marker set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
  update MLC_Reference set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
  update MLC_Text set _Marker_key = v_newKey where _Marker_key = v_oldKey ;
END IF;

-- Update Annotations - 01/23/2002 - TR 2867 - MGI 2.8 - GO/Marker 
--PERFORM VOC_mergeAnnotations (1000, v_oldKey, v_newKey);

-- Update Annotations - 06/17/2003 - TR 4902 - InterPro/Marker 
--PERFORM VOC_mergeAnnotations (1003, v_oldKey, v_newKey);

-- Move non-duplicate Marker References to the new symbol 

update MGI_Reference_Assoc
set _Object_key = v_newKey
from MGI_Reference_Assoc r1
where _MGIType_key = 2
and _Object_key = v_oldKey
and not exists (select 1 from MGI_Reference_Assoc r2
where r2._MGIType_key = 2
and r2._Object_key = v_newKey
and r2._Refs_key = r1._Refs_key)
;

-- Delete remaining References from old Symbol 

delete from MGI_Reference_Assoc where _MGIType_key = 2 and _Object_key = v_oldKey ;

-- Reload cache tables for both old and new symbols 

--PERFORM MRK_reloadLocation (v_oldKey);
--PERFORM MRK_reloadLocation (v_newKey);

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_updateKeys(int,int) TO public;

COMMENT ON FUNCTION mgd.MRK_updateKeys(int,int) IS '';

EOSQL
