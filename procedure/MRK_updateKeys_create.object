#!/bin/sh

#
# History
#
# 02/26/2015    lec
#       Delete roll-up annotations (_AnnotType_key = 1015, 1016)
#       Delete MRK_ClusterMember
#
# 02/24/2015    lec
#       - remove MLC
#
# 01/30/2014	lec
#	- TR 10841; remove obsolete mld_distance/mld_physmap
#
# 03/18/2009	lec
#	- TR 7493; add call to update allele/marker association
#
# 03/16/2006	lec
#	- TR 7530; removed MLD_Marker
#
# 11/16/2005	lec
#	- TR 7194; ALL_Knockout_Cache
#
# 12/09/2004	lec
#	- TR 5686; MRK_Other replaced by MGI_Synonym
#
# lec	06/17/2003
#	- TR 4902; added InterPro/Marker annotations
#
# lec	05/09/2003
#	- TR 4587; move Marker Detail Clip over during merge
#
# lec	01/23/2002
#	- TR 2867; added VOC_mergeAnnotations
#
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MRK_updateKeys_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MRK_updateKeys (
v_oldKey int,
v_newKey int
)
RETURNS VOID AS
\$\$

DECLARE
v_userKey int;

BEGIN

-- Executed during merge withdrawal process

--
-- Set the preferred bit to 0 for all MGI Acc# brought over from old symbol if
-- the new symbol already contains a preferred MGI Acc#.
-- Associate all Accession numbers w/ new symbol.
--

IF (SELECT count(*) 
    FROM ACC_Accession 
    WHERE _MGIType_key = 2 
	AND prefixPart = 'MGI:' 
	AND _LogicalDB_key = 1 
	AND _Object_key = v_newKey 
	AND preferred = 1) > 0
THEN
	UPDATE ACC_Accession 
	SET _Object_key = v_newKey, preferred = 0
	WHERE _LogicalDB_key = 1 
	AND _MGIType_key = 2 
	AND _Object_key = v_oldKey
	;
END IF;

--
-- remove any Accession records belonging to old marker
-- which already exist for new marker
-- that is, remove duplicates before updating keys
--

DELETE 
FROM ACC_Accession
USING ACC_Accession new
WHERE ACC_Accession._MGIType_key = 2
AND ACC_Accession._Object_key = v_oldKey
AND ACC_Accession.accID = new.accID
AND ACC_Accession._LogicalDB_key = new._LogicalDB_key
AND new._Object_key = v_newKey
AND new._MGIType_key = 2
;

UPDATE ACC_Accession 
SET _Object_key = v_newKey
WHERE _MGIType_key = 2 AND _Object_key = v_oldKey
;

-- Associate aliases, classes, other names, references w/ new symbol 

-- Remove reflexive Alias records, if they exist 

DELETE FROM MRK_Alias WHERE _Marker_key = v_oldKey AND _Alias_key = v_newKey ;
DELETE FROM MRK_Alias WHERE _Alias_key = v_oldKey AND _Marker_key = v_newKey ;

UPDATE MRK_Alias SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MRK_Alias SET _Alias_key = v_newKey WHERE _Alias_key = v_oldKey ;
UPDATE ALL_Allele SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE ALL_Knockout_Cache SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MRK_Anchors SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MGI_Synonym SET _Object_key = v_newKey WHERE _MGIType_key = 2 AND _Object_key = v_oldKey ;
UPDATE MRK_Notes SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;

-- MRK_Classes may contain potential duplicates 

INSERT INTO MRK_Classes
SELECT v_newKey, m._Class_key, m.creation_date, m.modification_date
FROM MRK_Classes m
WHERE m._Marker_key = v_oldKey
AND not exists (select m2.* FROM MRK_Classes m2
WHERE m2._Marker_key = v_newKey
AND m2._Class_key = m._Class_key)
;

DELETE FROM MRK_Classes WHERE _Marker_key = v_oldKey ;

-- Update all auxiliary references to old symbol w/ new symbol 

UPDATE CRS_Matrix SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE CRS_References SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE GXD_AllelePair SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE GXD_AlleleGenotype SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE GXD_Assay SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE GXD_Expression SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE WKS_Rosetta SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;

-- GXD_AntibodyMarker may contain potential duplicates 

DELETE 
FROM GXD_AntibodyMarker
USING GXD_AntibodyMarker p2
WHERE GXD_AntibodyMarker._Marker_key = v_oldKey 
AND GXD_AntibodyMarker._Antibody_key = p2._Antibody_key 
AND p2._Marker_key = v_newKey
;

UPDATE GXD_AntibodyMarker SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;

-- GXD_Index may contain potential duplicates 

IF EXISTS (select 1 FROM GXD_Index WHERE _Marker_key = v_newKey)
THEN
    -- merge duplicate index stage data 

    UPDATE GXD_Index_Stages
    SET _Index_key = n._Index_key
    FROM GXD_Index n, GXD_Index o
    WHERE n._Marker_key = v_newKey
    AND n._Refs_key = o._Refs_key
    AND o._Marker_key = v_oldKey
    AND o._Index_key = GXD_Index_Stages._Index_key
    AND not exists (select 1 FROM GXD_Index_Stages ns
    WHERE n._Index_key = ns._Index_key
    AND ns._IndexAssay_key = GXD_Index_Stages._IndexAssay_key
    AND ns._StageID_key = GXD_Index_Stages._StageID_key)
    ;
    
    DELETE 
    FROM GXD_Index
    WHERE exists (select 1 FROM GXD_Index n
    WHERE n._Marker_key = v_newKey
    AND n._Refs_key = GXD_Index._Refs_key
    AND GXD_Index._Marker_key = v_oldKey)
    ;
END IF;

-- this handles non-duplicate updates 

UPDATE GXD_Index SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MLD_Expt_Marker SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MLD_Concordance SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MLD_MC2point SET _Marker_key_1 = v_newKey WHERE _Marker_key_1 = v_oldKey ;
UPDATE MLD_MC2point SET _Marker_key_2 = v_newKey WHERE _Marker_key_2 = v_oldKey ;
UPDATE MLD_RI2Point SET _Marker_key_1 = v_newKey WHERE _Marker_key_1 = v_oldKey ;
UPDATE MLD_RI2Point SET _Marker_key_2 = v_newKey WHERE _Marker_key_2 = v_oldKey ;
UPDATE MLD_RIData SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE MLD_Statistics SET _Marker_key_1 = v_newKey WHERE _Marker_key_1 = v_oldKey ;
UPDATE MLD_Statistics SET _Marker_key_2 = v_newKey WHERE _Marker_key_2 = v_oldKey ;

PERFORM PRB_setStrainReview (v_oldKey);
 
UPDATE PRB_Strain_Marker SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;

-- PRB_Marker may contain potential duplicates 
DELETE 
FROM PRB_Marker
USING PRB_Marker p2
WHERE PRB_Marker._Marker_key = v_oldKey 
AND PRB_Marker._Probe_key = p2._Probe_key 
AND p2._Marker_key = v_newKey
;

UPDATE PRB_Marker SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;
UPDATE PRB_RFLV SET _Marker_key = v_newKey WHERE _Marker_key = v_oldKey ;

-- Update Annotations - 01/23/2002 - TR 2867 - MGI 2.8 - GO/Marker 
PERFORM VOC_mergeAnnotations (1000, v_oldKey, v_newKey);

-- Update Annotations - 06/17/2003 - TR 4902 - InterPro/Marker 
PERFORM VOC_mergeAnnotations (1003, v_oldKey, v_newKey);

-- Delete roll-up annotations
-- 1015 : Mammalian Phenotype/Marker (Derived)
-- 1016 : OMIM/Marker (Derived)
--

DELETE FROM VOC_Annot WHERE _AnnotType_key = 1015 AND _Object_key = v_oldKey;
DELETE FROM VOC_Annot WHERE _AnnotType_key = 1016 AND _Object_key = v_oldKey;

-- Delete MRK_ClusterMember from old Symbol
DELETE FROM MRK_ClusterMember where _Marker_key = v_oldKey;

-- Move non-duplicate Marker References to the new symbol 

UPDATE MGI_Reference_Assoc
SET _Object_key = v_newKey
WHERE MGI_Reference_Assoc._MGIType_key = 2
AND MGI_Reference_Assoc._Object_key = v_oldKey
AND not exists (select 1 FROM MGI_Reference_Assoc r2
WHERE r2._MGIType_key = 2
AND r2._Object_key = v_newKey
AND r2._Refs_key = MGI_Reference_Assoc._Refs_key)
;

-- Delete remaining References from old Symbol 

DELETE FROM MGI_Reference_Assoc WHERE _MGIType_key = 2 AND _Object_key = v_oldKey ;

-- Reload cache tables for both old and new symbols 

PERFORM MRK_reloadLocation (v_oldKey);
PERFORM MRK_reloadLocation (v_newKey);

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_updateKeys(int,int) TO public;

COMMENT ON FUNCTION mgd.MRK_updateKeys(int,int) IS 'updating Marker keys from old to new; see: MRK_mergeWithdrawal';

EOSQL
