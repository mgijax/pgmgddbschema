#!/bin/sh

#
# History
#
# 04/14/2014
#	- TR11656/remove hard-coded permissions
#
# 04/11/2014
#	- removed dbradt
#
# 07/08/2010
#	- TR 9316; fix offset;
#	  if chromosome = "UN" then offset = -999.00
#	  else offset = -1.0
#
# 06/29/2010
#	- TR 9316; fix offset;
#	  if chromosome = "UN" then offset = -999.00
#	  else offset = -1.0
#
# 11/17/2009	lec
#	- TR 9956; select v_offset = -999.0  ==> needs to be changed to "-1.0"
#
# 01/23/2009 - jsb - added hdt; TR9166
#
# 12/11/2008	lec
#	- TR 9416; remove default chromosome
#
# 03/18/2009	lec
#	- TR 7493; added records for allele/marker association
#
# 10/21/2005	lec
#	- TR 7185; added mberry as Tier 3
#
# 12/09/2004	lec
#	- TR 5686; MRK_Other replaced by MGI_Synonym
#
# 06/30/2004	lec
#	- TR 5998
#
# 08/26/2003	lec
#	- TR 4708
#
# 11/22/2002	lec
#	- add @transferOtherNames
#
# 05/29/2002	lec
#	- TR 1463; SAO
#
# 04/18/2002	lec
#	- TR 3590; added ln as Tier 3
#
# 03/19/2002	lec
#	- TR 3447; added cms as Tier 3
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/NOM_transferToMGD_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION NOM_transferToMGD (
v_userKey int,
v_nomenKey int,
v_transferSynonyms int DEFAULT 1
)
RETURNS VOID AS
\$\$

DECLARE
v_markerKey int;
v_offset float;

-- synonyms
syn_cursor refcursor;
v_synName mgi_synonym.synonym%TYPE;
v_synRefKey int;

-- references
ref_cursor refcursor;
v_relatedRefsKey int;

-- accession ids
acc_cursor refcursor;
v_accID acc_accession.accid%TYPE;
v_logicalDB int;
v_refsKey int;
v_preferred int;
v_private int;

-- alleles
allele_cursor refcursor;
v_alleleKey int;
v_assocKey int;
v_qualifierKey int;
v_mrkstatusKey int;

BEGIN

--
-- NOTE:
-- Create Current Symbol : will be handled by MRK_Marker_insert() trigger
-- Create GO_Tracking : will be handled by MRK_Marker_insert() trigger
-- Create Allele-Wild Type : will be handled by MRK_Marker_insert() trigger
--

v_markerKey := max(_Marker_key) + 1 from MRK_Marker;
v_qualifierKey := _Term_key from VOC_Term where _Vocab_key = 70 and term = 'Not Specified';
v_mrkstatusKey := _Term_key from VOC_Term where _Vocab_key = 73 and term = 'Curated';

IF v_nomenKey IS NULL
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Must supply a nomen key.';
	RETURN;
END IF;

IF (SELECT t.term FROM NOM_Marker n, VOC_Term t
	WHERE n._Nomen_key = v_nomenKey AND
	      n._NomenStatus_key = _Term_key) in ('Broadcast')
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Symbol has already been broadcast.';
	RETURN;
END IF;

IF (SELECT t.term FROM NOM_Marker n, VOC_Term t
	WHERE n._Nomen_key = v_nomenKey AND
	      n._NomenStatus_key = _Term_key) = 'Deleted'
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Symbol has been deleted.';
	RETURN;
END IF;

IF NOT EXISTS 
	(SELECT _Refs_key FROM MGI_Reference_Nomen_View
		WHERE _Object_key = v_nomenKey AND assocType = 'Primary')
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Symbol has no Primary Reference.';
	RETURN;
END IF;

-- Create new marker record in MGD

CREATE TEMP TABLE nom_transfer ON COMMIT DROP
AS SELECT n.symbol, n.name, n.chromosome, n._Marker_Type_key, n._Marker_Event_key, n._Marker_EventReason_key,
       n._CurationState_key, r._Refs_key
FROM NOM_Marker n, MGI_Reference_Nomen_View r
WHERE n._Nomen_key = v_nomenKey
AND n._Nomen_key = r._Object_key
AND r.assocType = 'Primary'
;

INSERT INTO MRK_Marker
	(_Marker_key, _Organism_key, _Marker_Status_key, _Marker_Type_key, _CurationState_key, symbol, name, chromosome,
	_CreatedBy_key, _ModifiedBy_key)
SELECT v_markerKey, 1, 1, _Marker_Type_key, _CurationState_key, symbol, name, chromosome, v_userKey, v_userKey
FROM nom_transfer
;

IF NOT FOUND
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Could not create symbol record (MRK_Marker).';
	RETURN;
END IF;

INSERT INTO MRK_Current VALUES(v_markerKey, v_markerKey, current_date, current_date)
;

IF NOT FOUND
THEN
        RAISE EXCEPTION E'NOM_transferToMGD: Could not add to MRK_Current.';
        RETURN;
END IF;

-- For Genes only...

IF (SELECT _Marker_Type_key FROM NOM_Marker WHERE _Nomen_key = @v_nomenKey) = 1
THEN
        INSERT INTO GO_Tracking VALUES(v_markerKey, 0, null, v_userKey, v_userKey, null, current_date, current_date)
	;
END IF;

IF NOT FOUND
THEN
        RAISE EXCEPTION E'NOM_transferToMGD: Could not add to GO_Tracking.';
        RETURN;
END IF;

-- create allele-wild-type
-- and other restrictions - see TR 3588
-- restrictions revised - see TR 11223

IF (SELECT _Marker_Type_key from NOM_Marker where _Nomen_key = v_nomenKey) = 1
            and (select symbol from NOM_Marker where _Nomen_key = v_nomenKey) not like 'mt-%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like 'withdrawn, =%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%dna segment%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like 'EST %'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%expressed sequence%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%cDNA sequence%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%gene model%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%hypothetical protein%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%ecotropic viral integration site%'
            and (select name from NOM_Marker where _Nomen_key = v_nomenKey) not like '%viral polymerase%'
THEN
        PERFORM ALL_createWildType (v_userKey,v_markerKey,v_symbol);

        IF NOT FOUND
        THEN
                RAISE EXCEPTION E'NOM_transferToMGD: Could not add allele-wild-type.';
                RETURN;
        END IF;
END IF;

-- Create Offset for new marker

IF (SELECT chromosome FROM nom_transfer) = 'UN'
THEN
	v_offset := -999.0;
ELSE
	v_offset := -1.0;
END IF;

INSERT INTO MRK_Offset VALUES (v_markerKey, 0, v_offset, current_date, current_date);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Could not add offset record (MRK_Offset).';
	RETURN;
END IF;

-- Create History line for new marker
PERFORM MRK_insertHistory (v_userKey, v_markerKey, v_markerKey, 
	(SELECT _Refs_key FROM nom_transfer), 
        (SELECT _Marker_Event_key FROM nom_transfer),
        (SELECT _Marker_EventReason_key FROM nom_transfer),
        (SELECT name FROM nom_transfer));

IF NOT FOUND
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Could not create history record (MRK_History).';
	RETURN;
END IF;

-- Create Synonyms : Synonym Type : find 'exact', _MGIType_key = 21, 1008 -> 'exact', _MGIType_key = 2, 1004

OPEN syn_cursor FOR
SELECT synonym, _Refs_key
FROM MGI_Synonym
WHERE _Object_key = v_nomenKey
AND _MGIType_key = 21
AND _SynonymType_key = 1008
;
LOOP
        FETCH syn_cursor INTO v_synName, v_synRefKey;
        EXIT WHEN NOT FOUND;
	PERFORM MGI_insertSynonym (v_userKey, v_markerKey, 2, 1004, v_synName, v_synRefKey);
END LOOP;
CLOSE syn_cursor;

-- Create References

OPEN ref_cursor FOR
SELECT _Refs_key
FROM MGI_Reference_Nomen_View
WHERE _Object_key = v_nomenKey
AND assocType = 'Related'
;
LOOP
        FETCH ref_cursor INTO v_relatedRefsKey;
        EXIT WHEN NOT FOUND;
	PERFORM MGI_insertReferenceAssoc (v_userKey, 2, v_markerKey, v_relatedRefsKey, 'General');
END LOOP;
CLOSE ref_cursor;

-- Create Accession IDs for new marker; turn private bit off
--      MGI Accession IDs
--      Accession IDs which don't have references (older EC numbers)
-- for Accession ids that contain *no* Accession/Reference relationship

OPEN acc_cursor FOR
SELECT DISTINCT a.accID, a._LogicalDB_key, a.preferred, 0 as private
FROM ACC_Accession a
WHERE a._Object_key = v_nomenKey
AND a._MGIType_key = 21
AND a._LogicalDB_key = 1
UNION
SELECT DISTINCT a.accID, a._LogicalDB_key, a.preferred, 0 as private
FROM ACC_Accession a
WHERE a._Object_key = v_nomenKey
AND a._MGIType_key = 21
AND a._LogicalDB_key != 1
AND not exists (select 1 from ACC_AccessionReference r WHERE a._Accession_key = r._Accession_key)
;
LOOP
        FETCH acc_cursor INTO v_accID, v_logicalDB, v_preferred, v_private;
        EXIT WHEN NOT FOUND;
	PERFORM ACC_insertNoChecks (v_markerKey, v_accID, v_logicalDB, 'Marker', -1, v_preferred, v_private);
END LOOP;
CLOSE acc_cursor;

-- Create Accession IDs for new marker; turn private bit off
-- for Accession ids that contain Accession/Reference relationship

OPEN acc_cursor FOR
SELECT DISTINCT a.accID, a._LogicalDB_key, r._Refs_key, a.preferred, 0 as private
FROM ACC_Accession a, ACC_AccessionReference r
WHERE a._Object_key = v_nomenKey
AND a._MGIType_key = 21
AND a._Accession_key = r._Accession_key
;
LOOP
        FETCH acc_cursor INTO v_accID, v_logicalDB, v_refsKey, v_preferred, v_private;
        EXIT WHEN NOT FOUND;
	PERFORM ACCRef_process (v_markerKey, v_refsKey, v_accID, v_logicalDB, 'Marker', v_preferred, v_private);
END LOOP;
CLOSE acc_cursor;

--
-- Allele Stuff
--
-- If the Marker was originally used in Alleles as a Nomenclature Marker, then 
--    set the ALL_Allele._Marker_key = real marker key    
--    set the ALL_Allele.nomenSymbol = null
--    add a record to ALL_Marker_Assoc
--

v_assocKey := max(_Assoc_key) + 1 from ALL_Marker_Assoc;

OPEN allele_cursor FOR
SELECT _Allele_key FROM ALL_Allele WHERE nomenSymbol = (SELECT symbol FROM nom_transfer);
LOOP
	FETCH allele_cursor INTO v_alleleKey;
        EXIT WHEN NOT FOUND;

        UPDATE ALL_Allele
        SET _Marker_key = v_markerKey, nomenSymbol = null
        WHERE _Allele_key = v_alleleKey
	;

        INSERT INTO ALL_Marker_Assoc
        VALUES (v_assocKey, v_alleleKey, v_markerKey, v_qualifierKey, null, v_mrkstatusKey,
         v_userKey, v_userKey, current_date, current_date)
	;

	IF NOT FOUND
	THEN
		RAISE EXCEPTION E'NOM_transferToMGD: Could not update Marker symbol in Allele record (ALL_Allele)';
		RETURN;
	END IF;

	v_assocKey := v_assocKey + 1;
END LOOP;
CLOSE allele_cursor;

-- Create MRK_Location_Cache row
PERFORM MRK_reloadLocation (v_markerKey);

IF NOT FOUND
THEN
	RAISE EXCEPTION E'NOM_transferToMGD: Could not create location cache record (MRK_Location_Cache).';
	RETURN;
END IF;

-- Update Status, Broadcast date, Broadcast User

UPDATE NOM_Marker
SET _NomenStatus_key = 166903, 
    _BroadcastBy_key = v_userKey, 
    broadcast_date = current_date
WHERE _Nomen_key = v_nomenKey
;

IF NOT FOUND
THEN
        RAISE EXCEPTION E'NOM_transferToMGD: Could not update Status/Broadcast Date/Broadcast By for symbol.';
        RETURN;
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION NOM_transferToMGD(int,int,int) TO public;

COMMENT ON FUNCTION mgd.NOM_transferToMGD(int,int,int) IS 'create/transfer Marker from NOM_Marker to MRK_Marker';

EOSQL

