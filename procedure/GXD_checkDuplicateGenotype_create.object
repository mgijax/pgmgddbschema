#!/bin/sh

#
# History
#
# 08/14/2014	lec
#	- during ei_linux testing, this sp needs to check for genotypes
#	that do not contains allele pairs
#
# 10/08/2012	lec
#	- TR10273/add mutant cell lines
#
# 08/29/2006	lec
#	- TR 7841; add _PairState_key to check for duplicate genotype
#
# 07/13/2006	lec
#	- TR 7806; add isConditional to check for duplicate genotype
#
# 12/20/2001	lec
#	- TR 2239
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/GXD_checkDuplicateGenotype_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION GXD_checkDuplicateGenotype (
v_genotypeKey int
)
RETURNS VOID AS
\$\$

DECLARE
genotype_cursor refcursor;
v_dupgenotypeKey int;
v_isDuplicate int;

BEGIN

--
-- Check if the given genotype record is a duplicate.
-- If it is a duplicate, the transaction is rolled back. 
--
-- SELECT the set of all genotypes with the same 
-- 	strain                                   
-- 	conditional flag                         
-- 	allele 1                                 
-- 	pair state                               
-- as the given genotype                         
--                                               
-- allele 2, mcl 1, mcl 2 can all be null        
-- so need to check this in the for-each loop    
-- (exclude the given genotype FROM this set)    
--
--                                                         
-- for each genotype that may be a duplicate...            
--                                                         
--	compare the set of Allele Pairs                    
--		of the given genotype                      
-- 	to the set of Allele Pairs of the other genotype   
--                                                         
-- 	if the sets are exactly equal,                     
--             then the given genotype is a duplicate      
--                                                         

OPEN genotype_cursor FOR
SELECT DISTINCT g1._Genotype_key
FROM GXD_Genotype g1, GXD_AllelePair ap1, GXD_Genotype g2, GXD_AllelePair ap2
WHERE g2._Genotype_key = v_genotypeKey
AND g1._Strain_key = g2._Strain_key
AND g1.isConditional = g2.isConditional
AND g1._Genotype_key != v_genotypeKey
AND g1._Genotype_key = ap1._Genotype_key
AND g2._Genotype_key = ap2._Genotype_key
AND ap1._Marker_key = ap2._Marker_key
AND ap1._Allele_key_1 = ap2._Allele_key_1
AND ap1._PairState_key = ap2._PairState_key
UNION
SELECT DISTINCT g1._Genotype_key
FROM GXD_Genotype g1, GXD_Genotype g2
WHERE g2._Genotype_key = v_genotypeKey
AND g1._Strain_key = g2._Strain_key
AND g1.isConditional = g2.isConditional
AND g1._Genotype_key != v_genotypeKey
AND NOT exists (SELECT 1 FROM GXD_AllelePair ap1 WHERE g1._Genotype_key = ap1._Genotype_key)
AND NOT exists (SELECT 1 FROM GXD_AllelePair ap2 WHERE g2._Genotype_key = ap2._Genotype_key)
;

LOOP
        FETCH genotype_cursor INTO v_dupgenotypeKey;

	-- if the # of Allele Pairs is different, then it's not a duplicate

	IF (SELECT count(*) FROM GXD_AllelePair WHERE _Genotype_key = v_genotypeKey) != 
	   (SELECT count(*) FROM GXD_AllelePair WHERE _Genotype_key = v_dupgenotypeKey)
	THEN
		v_isDuplicate := 0;

	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 is not null
		AND g1._MutantCellLine_key_1 is not null
		AND g1._MutantCellLine_key_2 is not null
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g1._Allele_key_2 = g2._Allele_key_2
			AND g1._MutantCellLine_key_1 = g2._MutantCellLine_key_1
			AND g1._MutantCellLine_key_2 = g2._MutantCellLine_key_2
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 is not null
		AND g1._MutantCellLine_key_1 IS NULL
		AND g1._MutantCellLine_key_2 is not null
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g1._Allele_key_2 = g2._Allele_key_2
			AND g2._MutantCellLine_key_1 IS NULL
			AND g1._MutantCellLine_key_2 = g2._MutantCellLine_key_2
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 is not null
		AND g1._MutantCellLine_key_1 is not null
		AND g1._MutantCellLine_key_2 IS NULL
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g1._Allele_key_2 = g2._Allele_key_2
			AND g1._MutantCellLine_key_1 = g2._MutantCellLine_key_1
			AND g2._MutantCellLine_key_2 IS NULL
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 is not null
		AND g1._MutantCellLine_key_1 IS NULL
		AND g1._MutantCellLine_key_2 IS NULL
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g1._Allele_key_2 = g2._Allele_key_2
			AND g2._MutantCellLine_key_1 IS NULL
			AND g2._MutantCellLine_key_2 IS NULL
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 IS NULL
		AND g1._MutantCellLine_key_1 is not null
		AND g1._MutantCellLine_key_2 IS NULL
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g2._Allele_key_2 IS NULL
			AND g1._MutantCellLine_key_1 = g2._MutantCellLine_key_1
			AND g2._MutantCellLine_key_2 IS NULL
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSIF EXISTS (SELECT 1 FROM GXD_AllelePair g1
		WHERE g1._Genotype_key = v_genotypeKey
		AND g1._Allele_key_2 IS NULL
		AND g1._MutantCellLine_key_1 IS NULL
		AND g1._MutantCellLine_key_2 IS NULL
		AND NOT EXISTS (SELECT 1 FROM GXD_AllelePair g2
			WHERE g2._Genotype_key = v_dupgenotypeKey
			AND g1._Allele_key_1 = g2._Allele_key_1
			AND g2._Allele_key_2 IS NULL
			AND g2._MutantCellLine_key_1 IS NULL
			AND g2._MutantCellLine_key_2 IS NULL
			AND g1._PairState_key = g2._PairState_key)) THEN
		v_isDuplicate := 0;
	
	ELSE
		v_isDuplicate := 1;
		EXIT;
	END IF;

END LOOP;
CLOSE genotype_cursor;

IF v_isDuplicate = 1
THEN
        RAISE EXCEPTION E'Duplicate Genotype Detected.';
        RETURN;
END IF;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_checkDuplicateGenotype(int) TO public;

COMMENT ON FUNCTION mgd.GXD_checkDuplicateGenotype(int) IS 'check if _genotype_key is duplicate';

EOSQL
