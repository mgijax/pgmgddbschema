#!/bin/sh

#
# HISTORY:
#
# 12/08/2015	lec
#	- bug fixes for postgre conversion
#
# 11/28/2012	lec
#	- TR10273/new/update transmission and add a transmission/reference
#	- add header terms
#	- update transmission 'Chimeric' (3982952) or 'Cell Line' (3982953)
#	- add Used-FC references
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/ALL_postMP_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION ALL_postMP (
v_annotTypeKey int,
v_refKey int,
v_modifiedBy mgi_user.login%TYPE
)
RETURNS VOID AS
\$\$

DECLARE
v_alleleKey int;
v_modifiedByKey int;
all_cursor1 refcursor;
all_cursor2 refcursor;

BEGIN

-- login check expects a "%" was added to the v_modifedBy by the annotation loader
v_modifiedByKey := _User_key from MGI_User where login like v_modifiedBy;

-- add header terms
PERFORM VOC_processAnnotHeaderMissing (v_annotTypeKey);

-- update transmission status
OPEN all_cursor1 FOR
SELECT DISTINCT aa._Allele_key
FROM GXD_AlleleGenotype g, VOC_Annot a, VOC_Evidence e, ALL_Allele aa
WHERE g._Genotype_key = a._Object_key
AND a._AnnotType_key = v_annotTypeKey
AND g._Allele_key = aa._Allele_key
AND aa.isWildType = 0
AND aa._Transmission_key in (3982952, 3982953)
AND a._Annot_key = e._Annot_key
AND e._Refs_key = v_refKey
;

LOOP
        FETCH all_cursor1 INTO v_alleleKey;
        EXIT WHEN NOT FOUND;
    	UPDATE ALL_Allele 
	SET _Transmission_key = 3982951, 
	    _ModifiedBy_key = v_modifiedByKey,
	    modification_date = current_date
	WHERE _Allele_key = v_alleleKey
	;
    	PERFORM MGI_insertReferenceAssoc (1001, 11, v_alleleKey, v_refKey, 'Transmission');
END LOOP;
CLOSE all_cursor1;

-- add used-FC references
OPEN all_cursor2 FOR
SELECT DISTINCT aa._Allele_key
FROM GXD_AlleleGenotype g, VOC_Annot a, VOC_Evidence e, ALL_Allele aa
WHERE g._Genotype_key = a._Object_key
AND a._AnnotType_key = v_annotTypeKey
AND g._Allele_key = aa._Allele_key
AND aa.isWildType = 0
AND a._Annot_key = e._Annot_key
AND e._Refs_key = v_refKey
;

LOOP
        FETCH all_cursor2 INTO v_alleleKey;
        EXIT WHEN NOT FOUND;
    	PERFORM MGI_insertReferenceAssoc (1001, 11, v_alleleKey, v_refKey, 'Used-FC');
END LOOP;
CLOSE all_cursor2;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_postMP(int,int,varchar) TO public;

COMMENT ON FUNCTION mgd.ALL_postMP(int,int,varchar) IS 'perform post-Allele-MP updates';

EOSQL

