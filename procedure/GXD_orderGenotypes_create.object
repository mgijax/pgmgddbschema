#!/bin/sh

#
# History
#
# 01/17/2011 lec
#	- TR 10273/Europhenome
#	  add userKey; SET default to mgd_dbo
#
# 03/10/2005 lec
#	- TR 4289, MPR
#
# select _Genotype_key, _Allele_key_1 from GxD_AllelePair group by _Genotype_key having count(*) > 1
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/GXD_orderGenotypes_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION GXD_orderGenotypes (
v_alleleKey int,
v_userKey int DEFAULT 1001
)
RETURNS VOID AS
\$\$

DECLARE
v_pkey int;	-- primary key of records to UPDATE 
v_oldSeq int;	-- current sequence number
v_newSeq int;	-- new sequence number
seq_cursor refcursor;

BEGIN

--
-- Load the GXD_AlleleGenotype (cache) table for the given Allele.
-- Executed after any modification to GXD_AllelePair.
-- test: 263, 8734
--

-- Delete any pre-existing cache results for given Allele

DELETE FROM GXD_AlleleGenotype WHERE _Allele_key = v_alleleKey;

CREATE TEMP TABLE genotypes_tmp1 ON COMMIT DROP
AS SELECT DISTINCT ap._Genotype_key, ap._Allele_key_1, s.strain
FROM GXD_AllelePair ap, GXD_Genotype g, PRB_Strain s
WHERE (ap._Allele_key_1 = v_alleleKey or ap._Allele_key_2 = v_alleleKey)
AND ap._Genotype_key = g._Genotype_key
AND g._Strain_key = s._Strain_key
ORDER BY ap._Allele_key_1, s.strain
;

CREATE TEMP TABLE genotypes_tmp ON COMMIT DROP
AS SELECT DISTINCT _Genotype_key
FROM genotypes_tmp1
;

CREATE INDEX idx_genotypes_tmp ON genotypes_tmp(_Genotype_key);

CREATE TEMP TABLE simple_tmp ON COMMIT DROP
AS SELECT DISTINCT g._Genotype_key
FROM genotypes_tmp g, GXD_AllelePair ap
WHERE g._Genotype_key = ap._Genotype_key
GROUP by g._Genotype_key having count(*) = 1
;

CREATE INDEX idx_simple_tmp ON simple_tmp(_Genotype_key);

CREATE TEMP TABLE complex_tmp ON COMMIT DROP
AS SELECT DISTINCT g._Genotype_key
FROM genotypes_tmp g, GXD_AllelePair ap
WHERE g._Genotype_key = ap._Genotype_key
GROUP by g._Genotype_key having count(*) > 1
;

CREATE INDEX idx_complex_tmp ON complex_tmp(_Genotype_key);

-- simple

--RAISE NOTICE 'insert simple';

INSERT INTO GXD_AlleleGenotype 
(_Genotype_key, _Marker_key, _Allele_key, sequenceNum, _CreatedBy_key, _ModifiedBy_key)
SELECT DISTINCT ap._Genotype_key, ap._Marker_key, ap._Allele_key_1, -1, v_userKey, v_userKey
FROM simple_tmp s, GXD_AllelePair ap
WHERE s._Genotype_key = ap._Genotype_key
AND ap._Allele_key_1 = v_alleleKey
UNION
SELECT distinct ap._Genotype_key, ap._Marker_key, ap._Allele_key_2, -1, v_userKey, v_userKey
FROM simple_tmp s, GXD_AllelePair ap
WHERE s._Genotype_key = ap._Genotype_key
AND ap._Allele_key_2 = v_alleleKey
;

-- Apply ordering rules

--RAISE NOTICE 'update 1';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 1
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ag._Allele_key = ap._Allele_key_1
AND ap._PairState_key = 847138
--AND t.term = 'Homozygous'
;

--RAISE NOTICE 'update 2';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 3
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ap._PairState_key = 847137
--AND t.term = 'Heterozygous'
AND exists (SELECT 1 FROM ALL_Allele a WHERE ap._Allele_key_1 = a._Allele_key and a.isWildType = 0)
;

--RAISE NOTICE 'update 3';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 3
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ap._PairState_key = 847137
--AND t.term = 'Heterozygous'
AND exists (SELECT 1 FROM ALL_Allele a WHERE ap._Allele_key_2 = a._Allele_key and a.isWildType = 0)
;

--RAISE NOTICE 'update 4';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 2
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ap._PairState_key = 847137
--AND t.term = 'Heterozygous'
AND exists (SELECT 1 FROM ALL_Allele a WHERE ap._Allele_key_1 = a._Allele_key and a.isWildType = 1)
;

--RAISE NOTICE 'update 5';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 2
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ap._PairState_key = 847137
--AND t.term = 'Heterozygous'
AND exists (SELECT 1 FROM ALL_Allele a WHERE ap._Allele_key_2 = a._Allele_key and a.isWildType = 1)
;

--RAISE NOTICE 'update 6';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 4
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ag._Allele_key = ap._Allele_key_1
AND ap._PairState_key = 847133
--AND t.term = 'Hemizygous X-linked'
;

--RAISE NOTICE 'update 7';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 5
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ag._Allele_key = ap._Allele_key_1
AND ap._PairState_key = 847134
--AND t.term = 'Hemizygous Y-linked'
;

--RAISE NOTICE 'update 8';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 6
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ag._Allele_key = ap._Allele_key_1
AND ap._PairState_key = 847135
--AND t.term = 'Hemizygous Insertion'
;

--RAISE NOTICE 'update 9';

UPDATE GXD_AlleleGenotype
SET sequenceNum = 7
FROM simple_tmp s, GXD_AlleleGenotype ag, GXD_AllelePair ap
WHERE s._Genotype_key = ag._Genotype_key
AND ag._Allele_key = v_alleleKey
AND s._Genotype_key = ap._Genotype_key
AND ag._Allele_key = ap._Allele_key_1
AND ap._PairState_key = 847139
--AND t.term = 'Indeterminate'
;

-- complex 

--RAISE NOTICE 'insert complex';

INSERT INTO GXD_AlleleGenotype 
(_Genotype_key, _Marker_key, _Allele_key, sequenceNum, _CreatedBy_key, _ModifiedBy_key)
SELECT DISTINCT ap._Genotype_key, ap._Marker_key, ap._Allele_key_1, 8, v_userKey, v_userKey
FROM complex_tmp x, GXD_AllelePair ap
WHERE x._Genotype_key = ap._Genotype_key
AND ap._Allele_key_1 = v_alleleKey
UNION
SELECT DISTINCT ap._Genotype_key, ap._Marker_key, ap._Allele_key_2, 8, v_userKey, v_userKey
FROM complex_tmp x, GXD_AllelePair ap
WHERE x._Genotype_key = ap._Genotype_key
AND ap._Allele_key_2 = v_alleleKey
;

-- re-sequence to get rid of duplicate sequence numbers/gaps

v_newSeq := 1;

OPEN seq_cursor FOR
SELECT ap._Genotype_key, ap.sequenceNum, s.strain
FROM GXD_AlleleGenotype ap, GXD_Genotype g, PRB_Strain s
WHERE ap._Allele_key = v_alleleKey
AND ap._Genotype_key = g._Genotype_key
AND g._Strain_key = s._Strain_key
ORDER BY ap.sequenceNum, s.strain
;
LOOP
	FETCH seq_cursor INTO v_pkey, v_oldSeq;
        EXIT WHEN NOT FOUND;

	RAISE NOTICE 're-sequence %:%:%', v_alleleKey, v_pkey, v_newSeq;

	UPDATE GXD_AlleleGenotype 
	SET sequenceNum = v_newSeq 
	WHERE _Genotype_key = v_pkey 
	AND _Allele_key = v_alleleKey
	;

	v_newSeq := v_newSeq + 1;
END LOOP;
CLOSE seq_cursor;
 
-- Drop temp tables
DROP TABLE IF EXISTS genotypes_tmp;
DROP TABLE IF EXISTS simple_tmp;
DROP TABLE IF EXISTS complex_tmp;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_orderGenotypes(int,int) TO public;

COMMENT ON FUNCTION mgd.GXD_orderGenotypes(int,int) IS 'load the gxd_allelegenotype (cache) table for the given allele';

EOSQL
