#!/bin/sh

#
# History
#
# 08/25/2014    lec
#       - TR11654/stored procedures for postgres
#
# 05/25/2010 lec
#	- TR 10226/add different logic for antibody's
#
# 05/13/2010 lec
#	- TR 10216/add refsTypeKey to duplicate check
#
# 09/18/2003 lec
#	- TR 4724
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/MGI_insertReferenceAssoc_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION MGI_insertReferenceAssoc (
v_mgiTypeKey int,
v_objectKey int,
v_refsKey int,
v_refsType mgi_refassoctype.assocType%TYPE
)
RETURNS VOID AS
\$\$

DECLARE
v_refsTypeKey int;
v_assocKey int;
v_userKey int;

BEGIN

v_refsTypeKey := _RefAssocType_key FROM MGI_RefAssocType WHERE _MGIType_key = v_mgiTypeKey AND assocType = v_refsType;
v_assocKey := max(_Assoc_key) + 1 FROM MGI_Reference_Assoc;
v_userKey := _User_key FROM MGI_User where login = current_user;

-- Insert record into MGI_Reference_Assoc 
-- if the reference does not already exist

-- antibody
IF v_mgiTypeKey = 6 
THEN
	-- for antibody, do not include the reference type 
	-- as part of the check for duplicate references
	IF exists (SELECT 1 FROM MGI_Reference_Assoc
		WHERE _Refs_key = v_refsKey
		AND _Object_key = v_objectKey
		AND _MGIType_key = v_mgiTypeKey)
	THEN
		RETURN;
	END IF;

ELSE
	-- for all other mgi types, include the reference type
	-- as part of the check for duplicate references
	IF EXISTS (SELECT 1 FROM MGI_Reference_Assoc
		WHERE _Refs_key = v_refsKey
		AND _Object_key = v_objectKey
		AND _MGIType_key = v_mgiTypeKey
		AND _RefAssocType_key = v_refsTypeKey)
	THEN
		RETURN;
	END IF;

END IF;

INSERT INTO MGI_Reference_Assoc
VALUES (v_assocKey, v_refsKey, v_objectKey, v_mgiTypeKey, v_refsTypeKey,
	v_userKey, v_userKey, current_date, current_date)
;


END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MGI_insertReferenceAssoc(int,int,int,text) TO public;

COMMENT ON FUNCTION mgd.MGI_insertReferenceAssoc(int,int,int,text) IS 'create a new mgi_reference_assoc';

EOSQL
