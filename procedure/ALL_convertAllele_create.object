#!/bin/sh

#
# History
#
# 10/23/2008 - jsb - added check for null marker keys
#
# 06/30/2004	lec
#	- TR 5998

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/ALL_convertAllele_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_convertAllele
--
-- DESCRIPTION:
--        
-- Convert allele symbols of v_markerKey using v_oldSymbol and v_newSymbol values;
-- do NOT call this with a null value of v_markerKey, or it will fail and roll
-- back your transaction.
--
-- INPUT:
--      
-- v_userKey : MGI_User._User_key
-- v_markerKey : MRK_Marker._Marker_key
-- v_oldSymbol mrk_marker.symbol%TYPE : old marker symbol
-- v_newSymbol mrk_marker.symbol%TYPE : new marker symbol
-- v_alleleOf int DEFAULT 0 : is old Symbol an Allele of the new Symbol?
--
-- RETURNS:
--	VOID
--      

CREATE OR REPLACE FUNCTION ALL_convertAllele (
v_userKey int,
v_markerKey int,
v_oldSymbol mrk_marker.symbol%TYPE,
v_newSymbol mrk_marker.symbol%TYPE,
v_alleleOf int DEFAULT 0
)
RETURNS VOID AS
\$\$

DECLARE
v_alleleKey int;

BEGIN

-- If the marker key is null, then this procedure will not work.  Bail out
-- now before anything gets mixed up.
--
--

IF v_markerKey IS NULL
THEN
	RAISE EXCEPTION E'ALL_convertAllele : Cannot update symbols for allele which have no marker.';
	RETURN;
END IF;

--
-- If old Symbol is NOT allele of new Symbol... 
-- Convert new alleles:  
--	oldallele<+> --> newsymbol<+> 
--	oldallele<allele> --> newsymbol<allele> 
--      oldallele         --> newsymbol         

IF v_alleleOf = 0
THEN
	--	oldallele<+> --> newsymbol<+> 
	--	oldallele<allele> --> newsymbol<allele> 

	update ALL_Allele
	set symbol = v_newSymbol || '<' ||
		substring(symbol,  position('<' in symbol) + 1, char_length(symbol)),
		_ModifiedBy_key = v_userKey, modification_date = now()
	where _Marker_key = v_markerKey and symbol like '%<%'
	;

	--      oldallele         --> newsymbol         

	update ALL_Allele set symbol = v_newSymbol, 
		_ModifiedBy_key = v_userKey, modification_date = now()
	where _Marker_key = v_markerKey and symbol = v_oldSymbol
	;
ELSE
	-- If old Symbol is an Allele of new Symbol... 
	-- Convert new alleles:  
	--	oldallele<+> --> newsymbol<+> 
	--	oldallele<allele> --> newsymbol<oldallele-allele> 
	--      oldallele         --> newsymbol<oldallele>        

	-- Non Wild Type 
	--	oldallele<allele> --> newsymbol<oldallele-allele> 

	update ALL_Allele
	set symbol = v_newSymbol || '<' || 
	        substring(symbol, 1, position('<' in symbol) - 1) || '-' ||
		substring(symbol,  position('<' in symbol) + 1, char_length(symbol)),
		_ModifiedBy_key = v_userKey, modification_date = now()
	where _Marker_key = v_markerKey and symbol like '%<%' and isWildType = 0
	;

	--      oldallele         --> newsymbol<oldallele>        

	update ALL_Allele
	set symbol = v_newSymbol || '<' || symbol || '>', 
		_ModifiedBy_key = v_userKey, modification_date = now()
	where _Marker_key = v_markerKey and symbol not like '%<%' and isWildType = 0
	;

	-- Wild Type Allele 
	--	oldsymbol<+>	  --> newsymbol<+>        

	update ALL_Allele
	set symbol = v_newSymbol || '<+>',
		_ModifiedBy_key = v_userKey, modification_date = now()
	where _Marker_key = v_markerKey and isWildType = 1 and symbol like '%<+>'
	;
END IF;

FOR v_alleleKey IN
SELECT _Allele_key from ALL_Allele where _Marker_key = v_markerKey
LOOP
	PERFORM ALL_reloadLabel (v_alleleKey);
END LOOP;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_convertAllele(int,int,text,text,int) TO public;

COMMENT ON FUNCTION mgd.ALL_convertAllele(int,int,text,text,int) IS 'convert allele symbols of using old symbol/new symbol';

EOSQL

