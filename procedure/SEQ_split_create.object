#!/bin/sh

#
# History
#
# lib_java_dla/.../loader/seq/MergeSplitProcessor.java
#
# 05/24/2017    lec
#       - TR12240/12083/varchar to text
#
# 03/05/2015	lec
#	- remove calls to obsolete procedures (seq_loadmarkercache, seq_loadprobecache)
#
# 01/12/2004
#	- JSAM
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/SEQ_split_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION SEQ_split (
v_fromSeqID acc_accession.accID%TYPE,
v_toSeqIDs text
)
RETURNS VOID AS
\$\$

DECLARE
v_fromSeqKey int;
v_splitStatusKey int;
v_toSeqKey int;
v_toAccID acc_accession.accID%TYPE;
v_idx text;
v_accID acc_accession.accID%TYPE;
v_logicalDB int;

BEGIN

--
-- Split v_fromSeqID to v_toSeqIDs
-- where v_toSeqIDs is a comma-separated list of Seq IDs to split the v_fromSeqID into
--
-- 1) Copy non-duplicate "from" Accession IDs to each "to" Sequence object and make them Secondary IDs
-- 2) Status the "from" Sequence object as "Split"
--
--

v_fromSeqKey := _Object_key from SEQ_Sequence_Acc_View where accID = v_fromSeqID and preferred = 1;
v_splitStatusKey := _Term_key from VOC_Term where _Vocab_key = 20 and term = 'SPLIT';

IF v_fromSeqKey IS NULL
THEN
	RAISE EXCEPTION 'SEQ_split: Could not resolve %.', v_fromSeqID;
	RETURN;
END IF;

-- delete cache entries from old sequence

DELETE FROM SEQ_Marker_Cache where _Sequence_key = v_fromSeqKey;
DELETE FROM SEQ_Probe_Cache where _Sequence_key = v_fromSeqKey;

-- For each new Sequence:
--
--      1. copy non-duplicate "from" Accession IDs to each "to" Sequence object and make them Secondary IDs
--      2. re-load SEQ_Marker_Cache
--      3. re-load SEQ_Probe_Cache

WHILE (v_toSeqIDs != NULL) LOOP
	v_idx := position(',' in v_toSeqIDs);

	IF v_idx > 0
	THEN
		v_toAccID := substring(v_toSeqIDs, 1, v_idx - 1);
		v_toSeqIDs := substring(v_toSeqIDs, v_idx + 1, char_length(v_toSeqIDs));
	ELSE
		-- at end of list of v_toSeqIDs
		v_toAccID := v_toSeqIDs;
		v_toSeqIDs := NULL;
	END IF;

	IF v_toAccID != NULL
	THEN
		v_toSeqKey := _Object_key from SEQ_Sequence_Acc_View where accID = v_toAccID and preferred = 1;

		IF v_toSeqKey is null
		THEN
			RAISE EXCEPTION E'SEQ_split: Could not resolve %.', v_toAccID;
			RETURN;
		END IF;

                -- delete cache entries from new sequence

                DELETE FROM SEQ_Marker_Cache where _Sequence_key = v_toSeqKey;
                DELETE FROM SEQ_Probe_Cache where _Sequence_key = v_toSeqKey;

		-- copy all Accession IDs of v_fromSeqKey to v_toSeqKey - make them all secondary
		FOR v_accID, v_logicalDB IN
		SELECT a1.accID, a1._LogicalDB_key
		FROM ACC_Accession a1
		WHERE a1._MGIType_key = 19
		AND a1._Object_key = v_fromSeqKey
		AND NOT EXISTS (SELECT 1 FROM ACC_Accession a2
			WHERE a2._MGIType_key = 19
			AND a2._Object_key = v_toSeqKey
			AND a2.accID = a1.accID)
		LOOP
			PERFORM ACC_insert (1001, v_toSeqKey, v_accID, v_logicalDB, 'Sequence', -1, 0, 0);
		END LOOP;
	END IF;
END LOOP;

-- Now make the final necessary modifications to the old Sequence object */

UPDATE SEQ_Sequence
SET _SequenceStatus_key = v_splitStatusKey, _ModifiedBy_key = 1001, modification_date = now()
WHERE _Sequence_key = v_fromSeqKey
;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION SEQ_split(text,text) TO public;

COMMENT ON FUNCTION mgd.SEQ_split(text,text) IS 'split sequences';

EOSQL

