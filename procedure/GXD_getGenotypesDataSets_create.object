#!/bin/sh

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/GXD_getGenotypesDataSets_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION GXD_getGenotypesDataSets (
v_genotypeKey int
)
RETURNS TABLE (
	jnum int,
	short_citation text,
	dataSet text
) AS
\$\$

BEGIN

-- Select all Data Sets for given Genotype 

CREATE TEMP TABLE objects ON COMMIT DROP
AS SELECT DISTINCT s._Refs_key, 'Reference' as label, 'GXD Assay' as dataSet
FROM GXD_Expression s
WHERE s._Genotype_key = v_genotypeKey
UNION ALL
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'PhenoSlim Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a, VOC_AnnotType t
WHERE t.name = 'PhenoSlim/Genotype'
AND t._AnnotType_key = a._AnnotType_key
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION ALL
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'Mammalian Phenotype Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a, VOC_AnnotType t
WHERE t.name = 'Mammalian Phenotype/Genotype'
AND t._AnnotType_key = a._AnnotType_key
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION ALL
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'OMIM Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a
where a._AnnotType_key = 1005
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION ALL
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'DO Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a
where a._AnnotType_key = 1020
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION ALL
SELECT DISTINCT 0 as _Refs_key, s.strain as label, 'Strain' as dataSet
FROM PRB_Strain_Genotype ps, PRB_Strain s
WHERE ps._Genotype_key = v_genotypeKey
AND ps._Strain_key = s._Strain_key
--UNION ALL
--SELECT DISTINCT 0, 'Reference' as label, 'HT Samples' as dataSet
--FROM GXD_HTSample a
--where a._Object_key = v_genotypeKey
;

CREATE INDEX idx1 ON objects(_Refs_key);

RETURN QUERY
SELECT b.jnum, b.short_citation, o.dataSet
FROM objects o, BIB_View b
WHERE o._Refs_key = b._Refs_key
UNION
SELECT NULL, o.label, o.dataSet
FROM objects o
WHERE o._Refs_key = 0
ORDER BY jnum
;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_getGenotypesDataSets(int) TO public;

COMMENT ON FUNCTION mgd.GXD_getGenotypesDataSets(int) IS 'select all data sets for genotype';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION GXD_getGenotypesDataSetsCount (
v_genotypeKey int
)
RETURNS INTEGER AS
\$\$

BEGIN

-- Select all Data Sets for given Genotype 

CREATE TEMP TABLE objects ON COMMIT DROP
AS SELECT DISTINCT s._Refs_key, 'Reference' as label, 'GXD Assay' as dataSet
FROM GXD_Expression s
WHERE s._Genotype_key = v_genotypeKey
UNION
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'Mammalian Phenotype Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a
WHERE a._AnnotType_key = 1002
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION
SELECT DISTINCT e._Refs_key, 'Reference' as label, 'OMIM Annotation' as dataSet
FROM VOC_Evidence e, VOC_Annot a
where a._AnnotType_key = 1005
AND a._Object_key = v_genotypeKey
AND a._Annot_key = e._Annot_key
UNION
SELECT DISTINCT 0 as _Refs_key, s.strain as label, 'Strain' as dataSet
FROM PRB_Strain_Genotype ps, PRB_Strain s
WHERE ps._Genotype_key = v_genotypeKey
AND ps._Strain_key = s._Strain_key
;

CREATE INDEX idx1 ON objects(_Refs_key);

RETURN (SELECT count(*) from objects);

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_getGenotypesDataSetsCount(int) TO public;

COMMENT ON FUNCTION mgd.GXD_getGenotypesDataSetsCount(int) IS 'select count of data sets for genotype';

EOSQL

