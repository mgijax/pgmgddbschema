#!/bin/sh

#
# History:
#
# 11/25/2008 - jsb - added for gene trap LF (TR7493) release
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/ALL_cacheMarker_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION ALL_cacheMarker (
v_markerKey int DEFAULT 0,
v_alleleKey int DEFAULT 0
)
RETURNS VOID AS
\$\$

DECLARE
v_invalidated int;

BEGIN

-- update the _Marker_key cached in ALL_Allele to be that represented in the
-- new ALL_Marker_Assoc table.  Optional parameters allow caching to be done
-- for a desired marker (all of its alleles), or for a particular allele, or
-- for all alleles.  
 
IF v_markerKey != 0
THEN
    -- set to null for alleles which used to be associated with the specified
    -- marker key, but which no longer are

    UPDATE ALL_Allele 
    SET _Marker_key = NULL
    FROM ALL_Allele a
    WHERE a._Marker_key = v_markerKey
	AND NOT EXISTS (SELECT 1 FROM ALL_Marker_Assoc m
		WHERE m._Allele_key = a._Allele_key
			AND m._Marker_key = v_markerKey)
    ;

    -- set the marker key for all alleles currently associated with the given
    -- marker key

    UPDATE ALL_Allele 
    SET _Marker_key = v_markerKey
    FROM ALL_Allele a, ALL_Marker_Assoc m
    WHERE a._Allele_key = m._Allele_key
	AND m._Marker_key = v_markerKey
	AND a._Marker_key != v_markerKey
    ;

ELSIF v_alleleKey != 0
THEN
    -- null out the prior value of the field

    UPDATE ALL_Allele 
    SET _Marker_key = null
    WHERE _Allele_key = v_alleleKey
    ;

    -- if there is now an association to a marker, then cache the marker key

    UPDATE ALL_Allele 
    SET _Marker_key = m._Marker_key
    FROM ALL_Allele a, ALL_Marker_Assoc m
    WHERE a._Allele_key = m._Allele_key
	AND a._Allele_key = v_alleleKey
    ;

ELSE
    -- if we got here, this is because of a data load.  first verify that our
    -- requirement of at most one marker per allele is valid

    IF EXISTS (SELECT _Allele_key FROM ALL_Marker_Assoc group by _Allele_key having count(1) > 1)
    THEN
	RAISE EXCEPTION 'ALL_cacheMarker: Failed.  Multiple records per allele in ALL_Marker_Assoc.';
	RETURN;
    END IF;

--
-- We have three cases here to consider, to find AND fix changed allele/marker
-- associations:
--   1. allele is associated with a marker, the association is not flagged as
--   	being invalid, AND WHERE that marker key is not cached in ALL_Allele
--   2. allele is associated with a marker, the association is flagged as
--   	being invalid, AND WHERE the cached marker key in ALL_Allele is not
--   	null
--   3. allele is not associated with a marker, AND WHERE the cached marker
--   	key in ALL_Allele is not null
--

    v_invalidated := _Term_key FROM VOC_Term WHERE term = "Curator Invalidated" AND _Vocab_key = 73;

-- case 1
    UPDATE ALL_Allele
    SET _Marker_key = m._Marker_key
    FROM ALL_Allele a, ALL_Marker_Assoc m
    WHERE a._Allele_key = m._Allele_key
    AND (a._Marker_key != m._Marker_key or a._Marker_key = null)
    AND m._Status_key != v_invalidated
    ;

-- cases 2 AND 3
    UPDATE ALL_Allele
    SET _Marker_key = null
    FROM ALL_Allele a
    WHERE a._Marker_key != null
    AND (EXISTS (SELECT 1 FROM ALL_Marker_Assoc m
		WHERE m._Allele_key = a._Allele_key
		AND m._Status_key = v_invalidated)
	OR
        NOT EXISTS (SELECT 1 FROM ALL_Marker_Assoc m WHERE m._Allele_key = a._Allele_key)
	)
    ;

END IF;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_cacheMarker(int,int) TO public;

COMMENT ON FUNCTION mgd.ALL_cacheMarker(int,int) IS 'see alomrkload';

EOSQL
