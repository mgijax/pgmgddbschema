#!/bin/sh

#
# HISTORY
#
# 05/24/2017	lec
#	- TR12240/12083/varchar to text
#
# lec   08/27/2014
#       - TR11654/remove obsolete TR1270/IMAGE sp
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/ACCRef_process_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ACCRef_process
--
-- DESCRIPTOIN:
--        
-- To add a new Accession/Reference row to ACC_AccessionReference
--
-- If an Accession object already exists, then call ACCRef_insert() to add the new Accession/Reference row
-- Else, call ACC_insertNoChecks() to add a new Accession object and a new Accession/Reference row
--
-- INPUT:
--      
-- v_userKey                        : MGI_User._User_key
-- v_objectKey                      : ACC_Accession._Object_key
-- v_refsKey                        : BIB_Refs._Refs_key
-- v_accID acc_accession.accid%TYPE : ACC_Accession.accID
-- v_logicalDB                      : ACC_Accession._LogicalDB_key
-- v_mgiType acc_mgitype.name%TYPE  : ACC_Accession._MGIType_key
-- v_preferred int DEFAULT 1        : ACC_Accession.prefixPart
-- v_private int DEFAULT 0          : ACC_Accession.private
--
-- RETURNS:
--	VOID
--      
--

CREATE OR REPLACE FUNCTION ACCRef_process (
v_userKey int,
v_objectKey int,
v_refsKey int,
v_accID acc_accession.accid%TYPE,
v_logicalDB int,
v_mgiType acc_mgitype.name%TYPE,
v_preferred int DEFAULT 1,
v_private int DEFAULT 0
)
RETURNS VOID AS
\$\$

DECLARE
v_accKey int;

BEGIN

/* If the Object/Acc ID pair already exists, then use that _Accession_key */
/* and simply insert a new ACC_AccessionReference record (ACCRef_insert) */
/* Else, create a new ACC_Accession and ACC_AccessionReference record (ACC_insert) */

SELECT INTO v_accKey a._Accession_key 
FROM ACC_Accession a, ACC_MGIType m
WHERE a.accID = v_accID
AND a._Object_key = v_objectKey
AND a._MGIType_key = m._MGIType_key
AND m.name = v_mgiType
AND a._LogicalDB_key = v_logicalDB
;

IF v_accKey IS NOT NULL
THEN
	PERFORM ACCRef_insert (v_userKey, v_accKey, v_refsKey);
ELSE
	PERFORM ACC_insertNoChecks (v_userKey, v_objectKey, v_accID, v_logicalDB, v_mgiType, v_refsKey, v_preferred, v_private);
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ACCRef_process(int,int,int,text,int,text,int,int) TO public;

COMMENT ON FUNCTION mgd.ACCRef_process(int,int,int,text,int,text,int,int) IS 'creates a new acc_accessionreference row using a new or existing acc_accession row';

EOSQL
