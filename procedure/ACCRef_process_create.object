#!/bin/sh

#
# HISTORY
#
# lec   08/27/2014
#       - TR11654/remove obsolete TR1270/IMAGE sp
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION ACCRef_process(int,int,varchar,int,varchar,int,int);

CREATE OR REPLACE FUNCTION ACCRef_process (
v_objectKey int,
v_refsKey int,
v_accID acc_accession.accid%TYPE,
v_logicalDB int,
v_mgiType varchar(80),
v_preferred int = 1,
v_private int = 0
)
RETURNS VOID AS
\$\$

DECLARE
v_accKey int;

BEGIN

/* If the Object/Acc ID pair already exists, then use that _Accession_key */
/* and simply insert a new ACC_AccessionReference record (ACCRef_insert) */
/* Else, create a new ACC_Accession and ACC_AccessionReference record (ACC_insert) */

SELECT INTO v_accKey a._Accession_key 
FROM ACC_Accession a, ACC_MGIType m
WHERE a.accID = v_accID
AND a._Object_key = v_objectKey
AND a._MGIType_key = m._MGIType_key
AND m.name = v_mgiType
AND a._LogicalDB_key = v_logicalDB
;

IF v_accKey IS NOT NULL
THEN
	PERFORM ACCRef_insert (v_accKey, v_refsKey);
ELSE
	PERFORM ACC_insertNoChecks (v_objectKey, v_accID, v_logicalDB, v_mgiType, v_refsKey, v_preferred, v_private);
END IF;

RETURN;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ACCRef_process(int,int,varchar,int,varchar,int,int) TO public;

COMMENT ON FUNCTION mgd.ACCRef_process(int,int,varchar,int,varchar,int,int) IS 'creates a new acc_accessionreference row using a new or existing acc_accession row';

EOSQL
