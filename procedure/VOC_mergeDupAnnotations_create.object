#!/bin/sh

#
# History
#

cd `dirname $0` && . ./Configuration

${PG_MGD_DBSCHEMADIR}/procedure/VOC_mergeDupAnnotations_drop.object

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

CREATE OR REPLACE FUNCTION VOC_mergeDupAnnotations (
v_annotTypeKey int,
v_in_objectKey int
)
RETURNS VOID AS
\$\$

DECLARE

v_annotKey int;
v_objectKey int;
v_termKey int;
v_qualifierKey int;
v_annotevidenceKey int;
vv_annotKey int;
vv_objectKey int;
vv_termKey int;
vv_qualifierKey int;
vv_annotevidenceKey int;
vv_currentObjectKey int;
vv_prevObjectKey int := 0;
vv_goodAnnotKey int;
vv_badAnnotKey int;

BEGIN

--
-- NAME: VOC_mergeDupAnnotations
--
-- DESCRIPTION:
--        
-- Executed from API/AnotationService/process()
--
-- A unique VOC_Annotation record is defined by: 
--	_AnnotType_key	
--	_Object_key	
--	_Term_key	
--	_Qualifier_key	
--
-- For given _Object_key, find any duplicate VOC_Annot rows and:
--
-- move VOC_Evidence._Annot_key from bad/duplidate VOC_Annot record to "good" VOC_Annot record
-- delete duplicate VOC_Annot record
--
-- INPUT:
--      
-- annotTypeKey : VOC_Annot._AnnotType_key
-- in_objectKey    : VOC_Annot._Object_key
--
-- RETURNS:
--	VOID
--      

FOR v_annotTypeKey, v_objectKey, v_termKey, v_qualifierKey IN
select _annottype_key, _object_key, _term_key, _qualifier_key
from voc_annot 
where _annottype_key = v_annotTypeKey
and _object_key = v_in_objectKey
group by _annottype_key, _object_key, _term_key, _qualifier_key having count(*) > 1 
LOOP

	RAISE NOTICE 'LOOP1: _annottype_key = %, _object_key = %, _term_key = %, _qualifier_key = %', v_annotTypeKey, v_objectKey, v_termKey, v_qualifierKey;
	vv_prevObjectKey := 0;

	FOR vv_annotKey, vv_objectKey, vv_termKey, vv_qualifierKey, vv_annotevidenceKey IN
	select a._annot_key, a._object_key, a._term_key, a._qualifier_key, e._annotevidence_key
	from voc_annot a, voc_evidence e
	where a._annottype_key = v_annotTypeKey
	and a._object_key = v_objectKey
	and a._term_key =  v_termKey
	and a._qualifier_key = v_qualifierKey
	and a._annot_key = e._annot_key
	order by a._object_key, a._term_key, a._annot_key

	LOOP
		RAISE NOTICE 'LOOP2/with evidence: _annot_key = %, _object_key = %, _term_key = %, _qualifier_key = %', vv_annotKey, vv_objectKey, vv_termKey, vv_qualifierKey;
		vv_currentObjectKey := v_in_objectKey;

		IF vv_prevObjectKey != vv_currentObjectKey
		THEN
			vv_goodAnnotKey := vv_annotKey;
			vv_prevObjectKey := vv_currentObjectKey;
		ELSE
			vv_badAnnotKey := vv_annotKey;
	
			IF vv_goodAnnotKey != vv_badAnnotKey
			THEN
				RAISE NOTICE 'VOC_Evidence._AnnotEvidence_key=% from _Annot_key=% to _Annot_key=%', vv_annotevidenceKey, vv_badAnnotKey, vv_goodAnnotKey;
				RAISE NOTICE 'delete VOC_Annot._Annot_key =%', vv_badAnnotKey;
				UPDATE VOC_Evidence set _annot_key = vv_goodAnnotKey where _annotevidence_key = vv_annotevidenceKey;
				DELETE FROM VOC_Annot where _Annot_key = vv_badAnnotKey;
			END IF;
		END IF;

	END LOOP;

	vv_prevObjectKey := 0;

	FOR vv_annotKey, vv_objectKey, vv_termKey, vv_qualifierKey, vv_annotevidenceKey IN
	select a._annot_key, a._object_key, a._term_key, a._qualifier_key
	from voc_annot a
	where a._annottype_key = v_annotTypeKey
	and a._object_key = v_objectKey
	and a._term_key =  v_termKey
	and a._qualifier_key = v_qualifierKey
        and not exists (select 1 from voc_evidence e where a._annot_key = e._annot_key)
	order by a._object_key, a._term_key, a._annot_key

	LOOP
		RAISE NOTICE 'LOOP3/no evidence: _annot_key = %, _object_key = %, _term_key = %, _qualifier_key = %', vv_annotKey, vv_objectKey, vv_termKey, vv_qualifierKey;
		vv_currentObjectKey := v_in_objectKey;

		IF vv_prevObjectKey != vv_currentObjectKey
		THEN
			vv_goodAnnotKey := vv_annotKey;
			vv_prevObjectKey := vv_currentObjectKey;
		ELSE
			vv_badAnnotKey := vv_annotKey;
	
			IF vv_goodAnnotKey != vv_badAnnotKey
			THEN
				RAISE NOTICE 'delete VOC_Annot._Annot_key =%', vv_badAnnotKey;
				DELETE FROM VOC_Annot where _Annot_key = vv_badAnnotKey;
			END IF;
		END IF;

	END LOOP;

END LOOP;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_mergeDupAnnotations(int,int) TO public;

COMMENT ON FUNCTION mgd.VOC_mergeDupAnnotations(int,int) IS 'merge duplicate VOC_Annot/VOC_Evidence rows';

EOSQL
