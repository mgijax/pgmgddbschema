#!/bin/csh -f -x

#
# History
#
# 02/23/2011	lec
# 02/15/2011	lec
#	- TR 10584/strain permissions/undo
#
# 01/23/2009 - jsb - added hdt; TR9166
#
# 05/27/2009	lec
#	- removed tbreddy
#
# 01/23/2007	lec
#	- TR 8115, removed restrictions on Marker notes
#
# 07/14/2006	lec
#	- TR 7808, added acv, Tier 3
#
# 01/06/2006	lec
#	- TR 7372, added tbreddy
#
# 10/21/2005	lec
#	- TR 7185, added mberry, Tier 3
#
# lec	10/21/2005
#	- TR 7185, added mberry, Tier 3
#
# 11/10/2004	lec
#	- TR 6338; added smb
#
# 07/06/2004	lec
#	- TR 6009; added mmh, lmc
#
# 07/01/2004	lec
#	- added llw2
#
# 06/25/2004	lec
#	- TR 5973; added lmc
#
# 06/23/2004	lec
#	- TR 5967; added brs
#
# 06/22/2004	lec
#	- TR 5961; added hdene
#
# 01/28/2004	lec
#	- TR 5527; upgrade tbreddy to Tier 4
#
# 05/15/2003	lec
#	- TR 4812; removed pm and sr
#
# 05/13/2002	lec
#	- TR 1463; SAO
#
#
# Note that we never "update" a Note; we only delete and insert
#

cd `dirname $0` && source ./Configuration

cat - <<EOSQL | ${MGI_DBUTILS}/bin/doisql.csh ${DBSERVER} ${DBNAME} $0

use ${DBNAME}
go

create trigger MGI_Note_Insert
on MGI_Note
for insert
as

if @@rowcount > 1
begin
	return
end

declare @userKey integer
select @userKey = _User_key from MGI_User where login = user_name()

/* Allele objects ... */

if (select _MGIType_key from inserted) = 11
begin
	declare @pendingStatus integer
	select @pendingStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'In Progress'

	declare @reservedStatus integer
	select @reservedStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'Reserved'

	declare @approvedStatus integer
	select @approvedStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'Approved'

        declare @nomenNote integer
        select @nomenNote = _NoteType_key from MGI_NoteType
                where _MGIType_key = 11
                and noteType = 'Nomenclature'

        declare @generalNote integer
        select @generalNote = _NoteType_key from MGI_NoteType
                where _MGIType_key = 11
                and noteType = 'General'

    	if (select user_name()) not in ('mgd_dbo', 'dbo')
    	begin

	  /* pending, reserved, approved */
	  if (select a._Allele_Status_key from inserted i, ALL_Allele a where i._Object_key = a._Allele_key) 
			in (@pendingStatus, @reservedStatus, @approvedStatus)
	     and
	     (select _NoteType_key from inserted) = @nomenNote
	     and
	     (select @userKey) not in (select _User_key from MGI_UserTask_View where usertask = 'pheno:edit nomen notes')
	  begin
		rollback transaction
		raiserror 99999 "You do not have permission to modify the Nomenclature Notes of this Allele."
		return
	  end

	  /* pending, reserved, approved */
	  if (select a._Allele_Status_key from inserted i, ALL_Allele a where i._Object_key = a._Allele_key) 
			in (@pendingStatus, @reservedStatus, @approvedStatus)
	     and
	     (select _NoteType_key from inserted) = @generalNote
	     and
	     (select @userKey) not in (select _User_key from MGI_UserTask_View where usertask = 'pheno:edit general notes')
	  begin
		rollback transaction
		raiserror 99999 "You do not have permission to modify the General Notes of this Allele."
		return
	  end

	end
	/* end if user is not DBO */

end /* Allele permissions */

go

create trigger MGI_Note_Delete
on MGI_Note
for delete
as

if @@rowcount = 1
begin

declare @userKey integer
select @userKey = _User_key from MGI_User where login = user_name()

/* Allele objects ... */

if (select _MGIType_key from deleted) = 11
begin
	declare @pendingStatus integer
	select @pendingStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'In Progress'

	declare @reservedStatus integer
	select @reservedStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'Reserved'

	declare @approvedStatus integer
	select @approvedStatus = t._Term_key from VOC_Term t, VOC_Vocab v
		where v.name = 'Allele Status'
		and v._Vocab_key = t._Vocab_key
		and t.term = 'Approved'

        declare @nomenNote integer
        select @nomenNote = _NoteType_key from MGI_NoteType
                where _MGIType_key = 11
                and noteType = 'Nomenclature'

        declare @generalNote integer
        select @generalNote = _NoteType_key from MGI_NoteType
                where _MGIType_key = 11
                and noteType = 'General'

    	if (select user_name()) not in ('mgd_dbo', 'dbo')
    	begin

	  /* pending, reserved, approved */
	  if (select a._Allele_Status_key from inserted i, ALL_Allele a where i._Object_key = a._Allele_key) 
			in (@pendingStatus, @reservedStatus, @approvedStatus)
	     and
	     (select _NoteType_key from inserted) = @nomenNote
	     and
	     (select @userKey) not in (select _User_key from MGI_UserTask_View where usertask = 'pheno:edit nomen notes')
	  begin
		rollback transaction
		raiserror 99999 "You do not have permission to modify the Nomenclature Notes of this Allele."
		return
	  end

	  /* pending, reserved, approved */
	  if (select a._Allele_Status_key from inserted i, ALL_Allele a where i._Object_key = a._Allele_key) 
			in (@pendingStatus, @reservedStatus, @approvedStatus)
	     and
	     (select _NoteType_key from inserted) = @generalNote
	     and
	     (select @userKey) not in (select _User_key from MGI_UserTask_View where usertask = 'pheno:edit general notes')
	  begin
		rollback transaction
		raiserror 99999 "You do not have permission to modify the General Notes of this Allele."
		return
	  end

	end
	/* end if user is not DBO */

end /* Allele permissions */

end

go

checkpoint
go

quit

EOSQL
