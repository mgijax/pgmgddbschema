#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Genotype_delete_trigger ON GXD_Genotype;
DROP FUNCTION IF EXISTS GXD_Genotype_delete();

CREATE OR REPLACE FUNCTION GXD_Genotype_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: GXD_Genotype_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Genotype_key = a._Object_key
	  AND a._AnnotType_key = 1002)
THEN
        RAISE EXCEPTION E'Genotype is referenced in Mammalian Phenotype/Genotype Annotations';
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Genotype_key = a._Object_key
	  AND a._AnnotType_key = 1020)
THEN
        RAISE EXCEPTION E'Genotype is referenced in DO/Genotype Annotations';
END IF; 

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

DELETE FROM VOC_AnnotHeader a
WHERE a._Object_key = OLD._Genotype_key
AND a._AnnotType_key = 1002
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Genotype_key
AND a._MGIType_key = 12
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Genotype_delete() TO public;

CREATE TRIGGER GXD_Genotype_delete_trigger
AFTER DELETE on GXD_Genotype
FOR EACH ROW
EXECUTE PROCEDURE GXD_Genotype_delete();

COMMENT ON FUNCTION mgd.GXD_Genotype_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Genotype_insert_trigger ON GXD_Genotype;
DROP FUNCTION IF EXISTS GXD_Genotype_insert();

CREATE OR REPLACE FUNCTION GXD_Genotype_insert() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: GXD_Genotype_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

PERFORM ACC_assignMGI(1001, NEW._Genotype_key, 'Genotype');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Genotype_insert() TO public;

CREATE TRIGGER GXD_Genotype_insert_trigger
AFTER INSERT ON GXD_Genotype
FOR EACH ROW
EXECUTE PROCEDURE GXD_Genotype_insert();

COMMENT ON FUNCTION mgd.GXD_Genotype_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
