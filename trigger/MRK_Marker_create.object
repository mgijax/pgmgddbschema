#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS MRK_Marker_delete_trigger ON MRK_Marker;
DROP FUNCTION IF EXISTS MRK_Marker_delete();

CREATE OR REPLACE FUNCTION MRK_Marker_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: MRK_Marker_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- Disallow deletion if Marker is currently referenced elsewhere
IF EXISTS (SELECT * FROM MGI_Relationship
          WHERE OLD._Marker_key = _Object_key_1
          AND _Category_key in (1001, 1002, 1008))
THEN
        RAISE EXCEPTION E'Marker Symbol is referenced in MGI Relationship(s)';
END IF;

-- Disallow deletion if Marker is currently referenced elsewhere
IF EXISTS (SELECT * FROM MGI_Relationship
          WHERE OLD._Marker_key = _Object_key_2
          AND _Category_key in (1001, 1002, 1003, 1004, 1006, 1008))
THEN
        RAISE EXCEPTION E'Marker Symbol is referenced in MGI Relationship(s)';
END IF;

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1000)
THEN
        RAISE EXCEPTION E'Marker is referenced in GO-Marker Annotations';
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1003)
THEN
        RAISE EXCEPTION E'Marker is referenced in InterPro-Marker Annotations';
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1007)
THEN
        RAISE EXCEPTION E'Marker is referenced in PIRSF-Marker Annotations';
END IF; 

--a cascading delete will remove the mcv annotation
--IF EXISTS (SELECT * FROM VOC_Annot a
--          WHERE OLD._Marker_key = a._Object_key
--          AND a._AnnotType_key = 1011)
--THEN
--        RAISE EXCEPTION E'Marker is referenced in MCV-Marker Annotations';
--END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1015)
THEN
        RAISE EXCEPTION E'Marker is referenced in Mammalian Phenotype-Marker Annotations %', OLD._Marker_key;
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1022)
THEN
        RAISE EXCEPTION E'Marker is referenced in DO-Human Marker Annotations';
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1023)
THEN
        RAISE EXCEPTION E'Marker is referenced in DO/Marker Annotations';
END IF; 

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Marker_key = a._Object_key
          AND a._AnnotType_key = 1017)
THEN
        RAISE EXCEPTION E'Marker is referenced in Protein Ontology/Marker Annotations';
END IF; 

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

DELETE FROM VOC_Annot a
WHERE a._Object_key = OLD._Marker_key
AND a._AnnotType_key = 1011
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Marker_key
AND a._MGIType_key = 2
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_Marker_delete() TO public;

CREATE TRIGGER MRK_Marker_delete_trigger
AFTER DELETE on MRK_Marker
FOR EACH ROW
EXECUTE PROCEDURE MRK_Marker_delete();

COMMENT ON FUNCTION mgd.MRK_Marker_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS MRK_Marker_insert_trigger ON MRK_Marker;
DROP FUNCTION IF EXISTS MRK_Marker_insert();

CREATE OR REPLACE FUNCTION MRK_Marker_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_offset float;

BEGIN

--
-- NAME: MRK_Marker_insert()
--
-- DESCRIPTOIN:
--
--      this insert trigger will call ACC_assignMGI
--      in order to add a distinct MGI accession id
--      to the NEW object
--
-- INPUT:
--      none
--
-- RETURNS:
--      NEW 
--

-- Only Mouse Markers use this trigger
IF (NEW._Organism_key != 1)
THEN
    RETURN NEW;
END IF;

-- No duplicates
IF (SELECT count(*) FROM MRK_Marker WHERE _Organism_key = 1 AND _Marker_Status_key in (1,3) AND symbol = NEW.symbol) > 1
THEN
    RAISE EXCEPTION E'Symbol "%" already exists\n', NEW.symbol;
    RETURN NEW;
END IF;

-- Create Current for new marker
INSERT INTO MRK_Current VALUES(New._Marker_key, NEW._Marker_key, now(), now());

IF NOT FOUND
THEN
    RAISE EXCEPTION E'MRK_Current is not found';
    RETURN NEW;
END IF;

-- Create Offset for new marker

--IF (NEW.chromosome = 'UN')
--THEN
        --v_offset := -999.0;
--ELSE
        --v_offset := -1.0;
--END IF; 

-- this is called from the EI/Marker module due to Reference rules
-- Create History line for new marker
-- J:23000 : 22864
--PERFORM MRK_insertHistory (NEW._CreatedBy_key, NEW._Marker_key, NEW._Marker_key, 22864, 1, -1,  NEW.name);

--IF NOT FOUND
--THEN
    --RAISE EXCEPTION E'MRK_insertHistory is not found';
    --RETURN NEW;
--END IF;

-- If marker is 'official', and 'gene', etc., then create wild type Allele
IF NEW._Marker_Status_key in (1)
   AND NEW._Marker_Type_key = 1 
   AND NEW.symbol not like 'mt-%'
   AND NEW.name not like 'withdrawn, =%' 
   AND NEW.name not like '%dna segment%'
   AND NEW.name not like 'EST %'
   AND NEW.name not like '%expressed sequence%'
   AND NEW.name not like '%cDNA sequence%'
   AND NEW.name not like '%gene model%'
   AND NEW.name not like '%hypothetical protein%'
   AND NEW.name not like '%ecotropic viral integration site%'        
   AND NEW.name not like '%viral polymerase%'
   AND NOT EXISTS (SELECT 1 FROM ALL_Allele where _Marker_key = NEW._Marker_key and isWildType = 1)
THEN
        PERFORM ALL_createWildType (NEW._ModifiedBy_key, NEW._Marker_key, NEW.symbol);

        IF NOT FOUND
        THEN
                RAISE EXCEPTION E'ALL_createWildType';
                RETURN NEW;
        END IF;
END IF;

-- Create Accession id for new marker
PERFORM ACC_assignMGI(1001, NEW._Marker_key, 'Marker');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_Marker_insert() TO public;

CREATE TRIGGER MRK_Marker_insert_trigger
AFTER INSERT ON MRK_Marker
FOR EACH ROW 
EXECUTE PROCEDURE MRK_Marker_insert();

COMMENT ON FUNCTION mgd.MRK_Marker_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS MRK_Marker_update_trigger ON MRK_Marker;
DROP FUNCTION IF EXISTS MRK_Marker_update();

CREATE OR REPLACE FUNCTION MRK_Marker_update() RETURNS TRIGGER AS \$\$

BEGIN

-- Only Mouse Markers use this trigger
IF (NEW._Organism_key != 1)
THEN
    RETURN NEW;
END IF;

-- No duplicates
IF (SELECT count(*) FROM MRK_Marker WHERE _Organism_key = 1 AND _Marker_Status_key in (1,3) AND symbol = NEW.symbol) > 1
THEN
    RAISE EXCEPTION E'Symbol "%" already exists', NEW.symbol;
    RETURN NEW;
END IF;

--
-- from: 'reserved' (_Marker_Status_key = 3)
-- to:  'official' (_Marker_Status_key = 1)
--

--
-- and:
--	reference = J:23000
--

IF OLD._Marker_Status_key in (3)
   AND NEW._Marker_Status_key in (1)
   AND EXISTS (SELECT 1 FROM MRK_History 
	WHERE _Marker_key = NEW._Marker_key 
	AND _History_key = NEW._Marker_key
	AND _Marker_Event_key = 1
	AND sequenceNum = 1
	AND _Refs_key = 22864
	)
THEN
	RAISE NOTICE E'Symbol is using J:23000';
END IF;

--
-- and:
--      marker type = 'Gene'
--      and wild-type allele does not exist
--      see other conitionals below
--
-- then create wild-type allele
--

IF OLD._Marker_Status_key in (3)
   AND NEW._Marker_Status_key in (1)
   AND NEW._Marker_Type_key = 1
   AND NEW.symbol not like 'mt-%'
   AND NEW.name not like 'withdrawn, =%'
   AND NEW.name not like '%dna segment%'
   AND NEW.name not like 'EST %'
   AND NEW.name not like '%expressed sequence%'
   AND NEW.name not like '%cDNA sequence%'
   AND NEW.name not like '%gene model%'
   AND NEW.name not like '%hypothetical protein%'
   AND NEW.name not like '%ecotropic viral integration site%'
   AND NEW.name not like '%viral polymerase%'
   AND NOT EXISTS (SELECT 1 FROM ALL_Allele where _Marker_key = NEW._Marker_key and isWildType = 1)
THEN
        PERFORM ALL_createWildType (NEW._ModifiedBy_key, NEW._Marker_key, NEW.symbol);

        IF NOT FOUND
        THEN
                RAISE EXCEPTION E'ALL_createWildType';
                RETURN NEW;
        END IF;
END IF;

IF OLD._Marker_Status_key in (1) AND NEW._Marker_Status_key in (3)
	AND (EXISTS (SELECT 1 FROM ALL_Allele WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM ALL_Knockout_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GO_Tracking WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_AlleleGenotype WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_AllelePair WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_AntibodyMarker WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_Assay WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_Expression WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM GXD_Index WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM MLD_Expt_Marker WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM MRK_ClusterMember WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM MRK_MCV_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM MRK_DO_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM MRK_DO_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM PRB_Marker WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM PRB_RFLV WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM PRB_Strain_Marker WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM SEQ_Marker_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM VOC_Marker_Cache WHERE NEW._Marker_key = _Marker_key)
	     OR EXISTS (SELECT 1 FROM WKS_Rosetta WHERE NEW._Marker_key = _Marker_key)
	     )
THEN
	RAISE EXCEPTION E'Cannot change "official" to "reserved" because Marker has annotations';
	RETURN NEW;
END IF;

-- TR11855 : 08/16/2018 lec
-- if chromosome value has changed, then add to "Needs Review - Chr"
IF OLD.chromosome != NEW.chromosome
THEN
	PERFORM PRB_setStrainReview (NEW._Marker_key, NULL, (select _Term_key from VOC_Term where _Vocab_key = 56 and term = 'Needs Review - chr'));

        IF NOT FOUND
        THEN
                RAISE EXCEPTION E'PRB_setStrainReview';
                RETURN NEW;
        END IF;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MRK_Marker_update() TO public;

CREATE TRIGGER MRK_Marker_update_trigger
AFTER UPDATE ON MRK_Marker
FOR EACH ROW
EXECUTE PROCEDURE MRK_Marker_update();

COMMENT ON FUNCTION mgd.MRK_Marker_update() IS 'creates an update trigger';

EOSQL

