#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS VOC_Evidence_delete_trigger ON VOC_Evidence;
DROP FUNCTION IF EXISTS VOC_Evidence_delete();

CREATE OR REPLACE FUNCTION VOC_Evidence_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: VOC_Evidence_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- If there are no more Evidence records for this Annotation, then delete
-- the Annotation record as well

IF NOT EXISTS (SELECT 1 FROM VOC_Evidence where OLD._Annot_key = VOC_Evidence._Annot_key)
THEN
        DELETE FROM VOC_Annot a
	WHERE a._Annot_key = OLD._Annot_key
	;
END IF;

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._AnnotEvidence_key
AND a._MGIType_key = 25
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Evidence_delete() TO public;

CREATE TRIGGER VOC_Evidence_delete_trigger
AFTER DELETE on VOC_Evidence
FOR EACH ROW
EXECUTE PROCEDURE VOC_Evidence_delete();

COMMENT ON FUNCTION mgd.VOC_Evidence_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS VOC_Evidence_insert_trigger ON VOC_Evidence;
DROP FUNCTION IF EXISTS VOC_Evidence_insert();

CREATE OR REPLACE FUNCTION VOC_Evidence_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_termKey int;
v_objectKey int;
v_dagKey int;

BEGIN

--
-- NAME: VOC_Evidence_insert()
--
-- DESCRIPTOIN:
--
--	1) if AP/GO annotation 
--              if Reference exists as group = 'AP', 'GO'
--		in BIB_Workflow_Status,
--	   then
--		set existing BIB_Workflow_Status.isCurrent = 0
--		add new BIB_Workflow_Status._Status_key = 'Full-coded'
--
-- changes to this trigger require changes to procedure/BIB_updateWFStatusAP_create.object
-- changes to this trigger require changes to procedure/BIB_updateWFStatusGO_create.object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

v_termKey := _Term_key FROM VOC_Annot a WHERE a._Annot_key = NEW._Annot_key;

v_objectKey := _Object_key FROM VOC_Annot a WHERE a._Annot_key = NEW._Annot_key;

v_dagKey := distinct _DAG_key FROM VOC_Annot_View a, DAG_Node_View d
        WHERE a._Annot_key = NEW._Annot_key
        AND a._Vocab_key = d._Vocab_key
        AND a._Term_key = d._Object_key;

--
-- TR 7865: Disallow Annotation if adding an Annotation to an "unknown" term (120, 1098, 6113)
-- and an Annotation to a known Term in the same DAG already exists
-- If the Annotation to a known Term is to
-- J:72247 (InterPro)
-- J:60000 (Swiss-Prot)
-- J:72245 (Swiss-Prot)
-- J:80000 (RIKEN)
-- J:56000
-- then it's okay 
--

IF v_termKey in (120, 1098, 6113)
THEN
        -- determine if the same Object contains an Annotation to a different Term
        -- within the same DAG

        IF EXISTS (SELECT 1 FROM VOC_Evidence e, VOC_Annot a, VOC_AnnotType ap, VOC_VocabDAG v, DAG_Node n
                WHERE e._Refs_key not in (73199, 61933, 80961, 59154, 73197)
                AND e._Annot_key = a._Annot_key
                AND a._Object_key = v_objectKey
                AND a._Term_key != v_termKey
                AND a._AnnotType_key = ap._AnnotType_key
                AND ap._Vocab_key = v._Vocab_key
                AND v._DAG_key = v_dagKey
                AND v._DAG_key = n._DAG_key
                AND a._Term_key = n._Object_key)
        THEN
                RAISE EXCEPTION E'This Object has already been annotated to this DAG.\\nTherefore, you cannot annotate it
 to an unknown term.';
        END IF;
END IF;

-- If the new Object is already annotated to an unknown term in the same DAG
-- then delete the Annotation to the unknown term.

IF v_termKey not in (120, 1098, 6113)
THEN
        -- determine if the same Object contains an Annotation to an unknown Term
        -- within the same DAG 

        IF EXISTS (SELECT 1
                FROM VOC_Evidence e, VOC_Annot a, VOC_AnnotType ap, VOC_VocabDAG v, DAG_Node n
		WHERE e._Annot_key = a._Annot_key
                AND a._Object_key = v_objectKey
                AND a._Term_key in (120, 1098, 6113)
                AND a._Term_key != v_termKey
                AND a._AnnotType_key = ap._AnnotType_key
                AND ap._Vocab_key = v._Vocab_key
                AND v._DAG_key = v_dagKey
                AND v._DAG_key = n._DAG_key
                AND a._Term_key = n._Object_key)
        THEN
                DELETE FROM VOC_Evidence 
		USING VOC_Annot a, VOC_AnnotType ap, VOC_VocabDAG v, DAG_Node n
		WHERE VOC_Evidence._Annot_key = a._Annot_key
                AND a._Object_key = v_objectKey
                AND a._Term_key != v_termKey
                AND a._Term_key in (120, 1098, 6113)
                AND a._AnnotType_key = ap._AnnotType_key
                AND ap._Vocab_key = v._Vocab_key
                AND v._DAG_key = v_dagKey
                AND v._DAG_key = n._DAG_key
                AND a._Term_key = n._Object_key
		;
        END IF;
END IF;

-- if this is a GO annotation, then remove the NOGO designation for the reference

IF (SELECT a._AnnotType_key FROM VOC_Annot a where NEW._Annot_key = a._Annot_key) = 1000
THEN
	--obsolete
        UPDATE BIB_DataSet_Assoc
        SET isNeverUsed = 0 , modification_date = now(), _ModifiedBy_key = 1001
        WHERE _Refs_key = NEW._Refs_key
        AND _DataSet_key = 1005
	;

        IF EXISTS (SELECT 1 FROM BIB_Workflow_Status b
                WHERE NEW._Refs_key = b._Refs_key
                AND b._Group_key = 31576666
		AND b._Status_key != 31576674
		AND b.isCurrent = 1)
        THEN
            UPDATE BIB_Workflow_Status w set isCurrent = 0
            WHERE NEW._Refs_key = w._Refs_key
                AND w._Group_key = 31576666
            ;   
            INSERT INTO BIB_Workflow_Status 
            VALUES((select nextval('bib_workflow_status_serial')), NEW._Refs_key, 31576666, 31576674, 1, 
    	        NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
            ;
        END IF;
END IF;

-- if this an MP annotation                       
-- and the Reference is associated with an Allele 
-- then change the Allele Reference to "Used-FC" 

IF (SELECT a._AnnotType_key from VOC_Annot a where NEW._Annot_key = a._Annot_key) = 1002
   AND EXISTS (SELECT 1 FROM VOC_Annot a, GXD_AlleleGenotype g, MGI_Reference_Assoc r, MGI_RefAssocType rt
       WHERE NEW._Annot_key = a._Annot_key
       AND a._Object_key = g._Genotype_key
       AND g._Allele_key = r._Object_key
       AND NEW._Refs_key = r._Refs_key
       AND r._MGIType_key = 11
       AND r._RefAssocType_key = rt._RefAssocType_key
       AND rt.assocType != 'Used-FC')
THEN
    PERFORM MGI_updateReferenceAssoc (1001, 12, v_objectKey, NEW._Refs_key, 'Used-FC');
END IF;

-- if this is an MP annotation
-- any time a J# (Reference) is attached to a new/existing MP term,
-- set the Group AP/Status = "Full-coded"

IF (SELECT a._AnnotType_key FROM VOC_Annot a where NEW._Annot_key = a._Annot_key) = 1002
THEN
        IF EXISTS (SELECT 1 FROM BIB_Workflow_Status b
                WHERE NEW._Refs_key = b._Refs_key
                AND b._Group_key = 31576664
		AND b._Status_key != 31576674
                AND b.isCurrent = 1)
        THEN
            UPDATE BIB_Workflow_Status w set isCurrent = 0
            WHERE NEW._Refs_key = w._Refs_key
                AND w._Group_key = 31576664
            ;
            INSERT INTO BIB_Workflow_Status
            VALUES((select nextval('bib_workflow_status_serial')), NEW._Refs_key, 31576664, 31576674, 1,
                NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
            ;
        END IF;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Evidence_insert() TO public;

CREATE TRIGGER VOC_Evidence_insert_trigger
AFTER INSERT OR UPDATE ON VOC_Evidence
FOR EACH ROW
EXECUTE PROCEDURE VOC_Evidence_insert();

COMMENT ON FUNCTION mgd.VOC_Evidence_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
