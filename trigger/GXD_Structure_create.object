#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Structure_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Structure_delete_trigger ON GXD_Structure;
DROP FUNCTION IF EXISTS GXD_Structure_delete();

CREATE OR REPLACE FUNCTION GXD_Structure_delete() RETURNS TRIGGER AS \$\$
BEGIN

DELETE FROM GXD_StructureName a
WHERE a._Structure_key = OLD._Structure_key
;

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Structure_key
AND a._MGIType_key = 38
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Structure_delete() TO public;

CREATE TRIGGER GXD_Structure_delete_trigger
AFTER DELETE on GXD_Structure
FOR EACH ROW
EXECUTE PROCEDURE GXD_Structure_delete();

COMMENT ON FUNCTION mgd.GXD_Structure_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

******************************************

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Structure_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Structure_insert_trigger ON GXD_Structure;
DROP FUNCTION IF EXISTS GXD_Structure_insert();

CREATE OR REPLACE FUNCTION GXD_Structure_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_treeDepth int;
v_parentKey int;
v_sk int;
v_isk int;
ancest_cursor refcursor;

BEGIN

v_parentKey := NEW._Parent_key;
v_isk := NEW._Structure_key;

-- find out the depth of the parent structure
v_treeDepth := treeDepth + 1 from GXD_Structure where _Structure_key = NEW._Parent_key;

-- update the inserted node
UPDATE GXD_Structure
SET treeDepth = v_treeDepth
WHERE _Structure_key = NEW._Structure_key
;

-- incrementally modify the closure
-- inserted node's parent

-- _Parent_key will be null for an immediate child of a stage root,
-- this node, by definition will not have any entries in the closure table,
-- since it is a root node as far as the database is concerned

IF v_parentKey != NULL
THEN
   OPEN ancest_cursor FOR
   SELECT c._Structure_key FROM GXD_StructureClosure c WHERE c._Descendent_key = v_parentKey;
   LOOP
        FETCH ancest_cursor INTO v_isk;
        EXIT WHEN NOT FOUND;

        -- for each ancestor, insert ancestor's _Structure_key, inserted's _Structure_key in GXD_StructureClosure

        INSERT INTO GXD_StructureClosure (_Structure_key, _Descendent_key) VALUES (@sk, @isk)
        ;
   END LOOP;
   CLOSE ancest_cursor;
  
   -- finally, insert the inserted node's _Parent_key and the inserted node's _Structure_key into the closure table
  
   INSERT INTO GXD_StructureClosure (_Structure_key, _Descendent_key) VALUES (v_parentKey, @isk)
   ;
END IF;

PERFORM ACC_assignMGI(1001, NEW._Structure_key, 'GXD Structures');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Structure_insert() TO public;

CREATE TRIGGER GXD_Structure_insert_trigger
AFTER INSERT ON GXD_Structure
FOR EACH ROW
EXECUTE PROCEDURE GXD_Structure_insert();

COMMENT ON FUNCTION mgd.GXD_Structure_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
