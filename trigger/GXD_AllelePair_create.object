#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_AllelePair_insert_trigger ON GXD_AllelePair;
DROP FUNCTION IF EXISTS GXD_AllelePair_insert();

CREATE OR REPLACE FUNCTION GXD_AllelePair_insert() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: GXD_AllelePair_insert()
--
-- DESCRIPTOIN:
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- Pair State error checks

IF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Homozygous'
   AND
   (NEW._Allele_key_1 != NEW._Allele_key_2)
THEN
	RAISE EXCEPTION E'State Attribute Error:  Homozygous state is not valid.';

ELSIF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Heterozygous'
   and not
   ( 
     NEW._Allele_key_1 != NEW._Allele_key_2
     and
     NEW._Allele_key_2 is not null
   )
THEN
	RAISE EXCEPTION E'State Attribute Error:  Heterozygous state is not valid.';

ELSIF NEW._Marker_key is not null
   and (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Hemizygous X-linked'
   and not
   (
     NEW._Allele_key_2 is null
     and
     (select t.term from VOC_Term t where NEW._Compound_key = t._Term_key) = 'Not Applicable'
     and
     ((select m.chromosome from MRK_Marker m where NEW._Marker_key = m._Marker_key) = 'X' or NEW._Marker_key is null)
   )
THEN
	RAISE EXCEPTION E'State Attribute Error:  Hemizygous X-linked state is not valid.';

ELSIF NEW._Marker_key is not null
   and (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Hemizygous Y-linked'
   and not
   (
     (NEW._Allele_key_2 is null
     and
     (select t.term from VOC_Term t where NEW._Compound_key = t._Term_key) = 'Not Applicable'
     and
     ( (select m.chromosome from MRK_Marker m where NEW._Marker_key = m._Marker_key) = 'Y') 
		or NEW._Marker_key is null)
   )
THEN
	RAISE EXCEPTION E'State Attribute Error:  Hemizygous Y-linked state is not valid.';

ELSIF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Hemizygous Insertion'
   and not ( NEW._Allele_key_2 is null)
THEN
	RAISE EXCEPTION E'State Attribute Error:  Hemizygous Insertion state is not valid.';

ELSIF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Hemizygous Deletion'
   and not
   (
     NEW._Allele_key_2 is null
     and
     (select t.term from VOC_Term t where NEW._Compound_key = t._Term_key) != 'Not Applicable'
   )
THEN
	RAISE EXCEPTION E'State Attribute Error:  Hemizygous Deletion state is not valid.';

ELSIF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) = 'Indeterminate'
   and not
   (
     NEW._Allele_key_2 is null
     and
     (select t.term from VOC_Term t where NEW._Compound_key = t._Term_key) = 'Not Applicable'
   )
THEN
	RAISE EXCEPTION E'State Attribute Error:  Indeterminate state is not valid.';
END IF;

-- Compound error checks

if (select t.term from VOC_Term t where NEW._Compound_key = t._Term_key) != 'Not Applicable'
THEN
   IF not ( NEW._Allele_key_2 is null
            or
            (select a.isWildType from ALL_Allele a where NEW._Allele_key_2 = a._Allele_key) = 1
          )
   THEN
	RAISE EXCEPTION E'Compound Attribute Error:  Allele 2 for all Compound Allele Pairs must be null or wild type.';
   END IF;

   IF (select t.term from VOC_Term t where NEW._PairState_key = t._Term_key) 
	in ('Hemizygous X-linked', 'Hemizygous Y-linked', 'Indeterminate')
   THEN
	RAISE EXCEPTION E'Allele Compound Error:  Top/Bottom compound is not valid for Hemi-X, Hemi-Y or Indeterminate states.';
   END IF;

END IF;

/* Mutant Cell Line error checks */

IF NEW._MutantCellLine_key_1 is not null
   and not exists (select 1 from ALL_Allele_CellLine a
	where NEW._Allele_key_1 = a._Allele_key
	and NEW._MutantCellLine_key_1 = a._MutantCellLine_key)
THEN
     RAISE EXCEPTION E'Allele 1 and Mutant Cell Line 1 are not compatable.';
END IF;

IF NEW._MutantCellLine_key_2 is not null
   and not exists (select 1 from ALL_Allele_CellLine a
	where NEW._Allele_key_2 = a._Allele_key
	and NEW._MutantCellLine_key_2 = a._MutantCellLine_key)
THEN
     RAISE EXCEPTION E'Allele 2 and Mutant Cell Line 2 are not compatable.';
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_AllelePair_insert() TO public;

CREATE TRIGGER GXD_AllelePair_insert_trigger
AFTER INSERT OR UPDATE ON GXD_AllelePair
FOR EACH ROW
EXECUTE PROCEDURE GXD_AllelePair_insert();

COMMENT ON FUNCTION mgd.GXD_AllelePair_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
