#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS MLD_Expts_delete_trigger ON MLD_Expts;
DROP FUNCTION IF EXISTS MLD_Expts_delete();

CREATE OR REPLACE FUNCTION MLD_Expts_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: MLD_Expts_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- Re-order the tag numbers for experiments if one is deleted

UPDATE MLD_Expts
SET tag = tag - 1
WHERE _Refs_key = OLD._Refs_key
AND exptType = OLD.exptType
AND tag > OLD.tag
;

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Expt_key
AND a._MGIType_key = 4
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MLD_Expts_delete() TO public;

CREATE TRIGGER MLD_Expts_delete_trigger
AFTER DELETE on MLD_Expts
FOR EACH ROW
EXECUTE PROCEDURE MLD_Expts_delete();

COMMENT ON FUNCTION mgd.MLD_Expts_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS MLD_Expts_insert_trigger ON MLD_Expts;
DROP FUNCTION IF EXISTS MLD_Expts_insert();

CREATE OR REPLACE FUNCTION MLD_Expts_insert() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: MLD_Expts_insert()
--
-- DESCRIPTOIN:
--
--      1) if the Reference is for group = 'QTL'
--              in BIB_Workflow_Status, and the status is not 'Full-coded'
--         then
--              set existing BIB_Workflow_Status.isCurrent = 0
--              add new BIB_Workflow_Status._Status_key = 'Full-coded'
--
--	2) this insert trigger will call ACC_assignMGI
--	   in order to add a distinct MGI accession id
--	   to the NEW object
--
-- changes to this trigger require changes to procedure/BIB_updateWFStatusQTL_create.object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

IF EXISTS (SELECT 1 FROM BIB_Workflow_Status b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._Group_key = 31576668
        AND b._Status_key != 31576674
	AND b.isCurrent = 1
	AND NEW.expttype in ('TEXT-QTL', 'TEXT-QTL-Candidate Genes', 'TEXT-Congenic', 'TEXT-Meta Analysis'))


THEN
    UPDATE BIB_Workflow_Status w set isCurrent = 0
    WHERE NEW._Refs_key = w._Refs_key
        AND w._Group_key = 31576668
    ;
    INSERT INTO BIB_Workflow_Status
    VALUES((select nextval('bib_workflow_status_seq')), NEW._Refs_key, 31576668, 31576674, 1,
        1001, 1001, now(), now())
    ;
    PERFORM BIB_keepWFRelevance (NEW._Refs_key, 1001);
END IF;

PERFORM ACC_assignMGI(1001, NEW._Expt_key, 'Experiment');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION MLD_Expts_insert() TO public;

CREATE TRIGGER MLD_Expts_insert_trigger
AFTER INSERT ON MLD_Expts
FOR EACH ROW
EXECUTE PROCEDURE MLD_Expts_insert();

COMMENT ON FUNCTION mgd.MLD_Expts_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
