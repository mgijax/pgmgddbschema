#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Antibody_delete_trigger ON GXD_Antibody;
DROP FUNCTION IF EXISTS GXD_Antibody_delete();

CREATE OR REPLACE FUNCTION GXD_Antibody_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: GXD_Antibody_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- delete GXD_AntibodyPrep records if they are no longer used in Assays
-- then the system should allow the probe to be deleted
DELETE FROM GXD_AntibodyPrep p
WHERE p._Antibody_key = OLD._Antibody_key
AND NOT EXISTS (SELECT 1 FROM GXD_Assay a WHERE p._AntibodyPrep_key = a._AntibodyPrep_key)
;

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Antibody_key
AND a._MGIType_key = 6
;

RETURN OLD;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Antibody_delete() TO public;

CREATE TRIGGER GXD_Antibody_delete_trigger
BEFORE DELETE on GXD_Antibody
FOR EACH ROW
EXECUTE PROCEDURE GXD_Antibody_delete();

COMMENT ON FUNCTION mgd.GXD_Antibody_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Antibody_insert_trigger ON GXD_Antibody;
DROP FUNCTION IF EXISTS GXD_Antibody_insert();

CREATE OR REPLACE FUNCTION GXD_Antibody_insert() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: GXD_Antibody_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

PERFORM ACC_assignMGI(1001, NEW._Antibody_key, 'Antibody');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Antibody_insert() TO public;

CREATE TRIGGER GXD_Antibody_insert_trigger
AFTER INSERT ON GXD_Antibody
FOR EACH ROW
EXECUTE PROCEDURE GXD_Antibody_insert();

COMMENT ON FUNCTION mgd.GXD_Antibody_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
