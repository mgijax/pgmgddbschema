#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_CellLine_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS ALL_CellLine_delete_trigger ON ALL_CellLine;
DROP FUNCTION IF EXISTS ALL_CellLine_delete();

CREATE OR REPLACE FUNCTION ALL_CellLine_delete() RETURNS TRIGGER AS \$\$
BEGIN

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._CellLine_key
AND a._MGIType_key = 28
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_CellLine_delete() TO public;

CREATE TRIGGER ALL_CellLine_delete_trigger
AFTER DELETE on ALL_CellLine
FOR EACH ROW
EXECUTE PROCEDURE ALL_CellLine_delete();

COMMENT ON FUNCTION mgd.ALL_CellLine_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_CellLine_update1()
-- NAME: ALL_CellLine_update2()
--
-- DESCRIPTOIN:
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS ALL_CellLine_update1_trigger ON ALL_CellLine;
DROP FUNCTION IF EXISTS ALL_CellLine_update1();

DROP TRIGGER IF EXISTS ALL_CellLine_update2_trigger ON ALL_CellLine;
DROP FUNCTION IF EXISTS ALL_CellLine_update2();

CREATE OR REPLACE FUNCTION ALL_CellLine_update1() RETURNS TRIGGER AS \$\$
BEGIN

-- update strains of mutant cell lines derived from this parent line

UPDATE ALL_CellLine
SET _Strain_key = NEW._Strain_key
FROM ALL_CellLine_Derivation d
WHERE NEW._CellLine_key = d._ParentCellLine_key
AND d._Derivation_key = ALL_CellLine._Derivation_key
;

--
-- Previously, when Strain was updated, we also needed to update all
-- Alleles which reference this ES Cell Line AND the old Strain (excluding
-- NA, NS, Other (see notes) cell lines).  Now, that is done by a nightly
-- script rather than in this trigger.
--

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_CellLine_update1() TO public;

CREATE TRIGGER ALL_CellLine_update1_trigger
AFTER UPDATE OF _Strain_key ON ALL_CellLine
FOR EACH ROW
EXECUTE PROCEDURE ALL_CellLine_update1();

COMMENT ON FUNCTION mgd.ALL_CellLine_update1() IS 'update trigger: _Strain_key';

--------------------------------------------

CREATE OR REPLACE FUNCTION ALL_CellLine_update2() RETURNS TRIGGER AS \$\$
BEGIN

--
-- If a mutant cell line has a change in its derivation key, then its strain
-- key must change to match the strain of its new parent cell line.
--

UPDATE ALL_CellLine
SET _Strain_key = p._Strain_key
FROM ALL_CellLine_Derivation d, ALL_CellLine p
WHERE NEW._CellLine_key = ALL_CellLine._CellLine_key
AND ALL_CellLine._Derivation_key = d._Derivation_key
AND d._ParentCellLine_key = p._CellLine_key
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_CellLine_update2() TO public;

CREATE TRIGGER ALL_CellLine_update2_trigger
AFTER UPDATE OF _Derivation_key ON ALL_CellLine
FOR EACH ROW
EXECUTE PROCEDURE ALL_CellLine_update2();

COMMENT ON FUNCTION mgd.ALL_CellLine_update2() IS 'update trigger: _Derivation_key';

EOSQL
