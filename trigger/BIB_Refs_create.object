#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS BIB_Refs_delete_trigger ON BIB_Refs;
DROP FUNCTION IF EXISTS BIB_Refs_delete();

CREATE OR REPLACE FUNCTION BIB_Refs_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: BIB_Refs_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Refs_key
AND a._MGIType_key = 1
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION BIB_Refs_delete() TO public;

CREATE TRIGGER BIB_Refs_delete_trigger
AFTER DELETE on BIB_Refs
FOR EACH ROW
EXECUTE PROCEDURE BIB_Refs_delete();

COMMENT ON FUNCTION mgd.BIB_Refs_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS BIB_Refs_insert_trigger ON BIB_Refs;
DROP FUNCTION IF EXISTS BIB_Refs_insert();

CREATE OR REPLACE FUNCTION BIB_Refs_insert() RETURNS TRIGGER AS \$\$

DECLARE
rec record;

BEGIN

--
-- NAME: BIB_Refs_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
--	adds: BIB_Workflow_Status, one row per Group, status = 'Not Routed'
--	adds: BIB_Workflow_Data, supplimental term = 'No supplemental data'
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

PERFORM ACC_assignMGI(1001, NEW._Refs_key, 'Reference');

FOR rec IN
SELECT _Term_key FROM VOC_Term where _Vocab_key = 127
LOOP
INSERT INTO BIB_Workflow_Status 
VALUES((select max(_Assoc_key) + 1 from BIB_Workflow_Status), NEW._Refs_key, rec._Term_key, 31576669, 1,  
	NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
;
END LOOP;

INSERT INTO BIB_Workflow_Data 
VALUES(NEW._Refs_key, 0, 34026998, null, null, NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION BIB_Refs_insert() TO public;

CREATE TRIGGER BIB_Refs_insert_trigger
AFTER INSERT ON BIB_Refs
FOR EACH ROW
EXECUTE PROCEDURE BIB_Refs_insert();

COMMENT ON FUNCTION mgd.BIB_Refs_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS BIB_Refs_update_trigger ON BIB_Refs;
DROP FUNCTION IF EXISTS BIB_Refs_update();

CREATE OR REPLACE FUNCTION BIB_Refs_update() RETURNS TRIGGER AS \$\$

BEGIN

--
-- NAME: BIB_Refs_update()
--
-- DESCRIPTOIN:
--
--	this update trigger will:
--	if the Reference Type has changed from Book to non-Book, then delete Book record
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- 31576679 = Book
IF OLD._ReferenceType_key in (31576679)
   AND NEW._ReferenceType_key not in (31576679)
THEN
	DELETE FROM BIB_Books a
	WHERE a._Refs_key = OLD._Refs_key
	;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION BIB_Refs_update() TO public;

CREATE TRIGGER BIB_Refs_update_trigger
AFTER UPDATE ON BIB_Refs
FOR EACH ROW
EXECUTE PROCEDURE BIB_Refs_update();

COMMENT ON FUNCTION mgd.BIB_Refs_update() IS 'creates an update trigger';

EOSQL
