#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: VOC_Evidence_update()
--
-- DESCRIPTOIN:
--
-- for MP annotations:
-- 	if the Reference is associated with an Allele 
-- 	then change the Allele Reference to "Used-FC" 
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS VOC_Evidence_update_trigger ON VOC_Evidence;
DROP FUNCTION IF EXISTS VOC_Evidence_update();

CREATE OR REPLACE FUNCTION VOC_Evidence_update() RETURNS TRIGGER AS \$\$

BEGIN

IF EXISTS (SELECT 1 FROM VOC_Annot a, GXD_AlleleGenotype g, MGI_Reference_Assoc r, MGI_RefAssocType rt
       WHERE OLD._Annot_key = a._Annot_key
       AND a._AnnotType_key = 1002
       AND a._Object_key = g._Genotype_key
       AND g._Allele_key = r._Object_key
       AND i._Refs_key = r._Refs_key
       AND r._MGIType_key = 11
       AND r._RefAssocType_key = rt._RefAssocType_key
       AND rt.assocType != 'Used-FC')
THEN
	PERFORM MGI_updateReferenceAssoc (12, 
		(SELECT a._Object_key FROM VOC_Annot a WHERE OLD._Annot_key = a._Annot_key), 
		OLD._Refs_key,
		'Used-FC');
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Evidence_update() TO public;

CREATE TRIGGER VOC_Evidence_update_trigger
AFTER INSERT on VOC_Evidence
FOR EACH ROW
EXECUTE PROCEDURE VOC_Evidence_update();

COMMENT ON FUNCTION mgd.VOC_Evidence_update() IS 'creates an update trigger for voc_evidence';

EOSQL
