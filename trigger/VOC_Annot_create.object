#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: VOC_Annot_delete()
--
-- DESCRIPTOIN:
--    
-- the template creates a trigger for all tables that use:
--      _Object_key
--      _MGIType_key
--
-- because these tables cannot use referencial integrity due 
-- to the fact that their primary key is not necessarily the 
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS VOC_Annot_delete_trigger ON VOC_Annot;
DROP FUNCTION IF EXISTS VOC_Annot_delete();

CREATE OR REPLACE FUNCTION VOC_Annot_delete() RETURNS TRIGGER AS \$\$
BEGIN

DELETE FROM VOC_AnnotHeader a
WHERE a._Object_key = OLD._Allele_key
AND a._AnnotType_key = 1002
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Annot_delete() TO public;

CREATE TRIGGER VOC_Annot_delete_trigger
AFTER DELETE on VOC_Annot
FOR EACH ROW
EXECUTE PROCEDURE VOC_Annot_delete();

COMMENT ON FUNCTION mgd.VOC_Annot_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: VOC_Annot_insert()
--
-- DESCRIPTOIN:
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS VOC_Annot_insert_trigger ON VOC_Annot;
DROP FUNCTION IF EXISTS VOC_Annot_insert();

CREATE OR REPLACE FUNCTION VOC_Annot_insert() RETURNS TRIGGER AS \$\$

BEGIN

IF (SELECT t.isObsolete FROM VOC_Term t WHERE t._Term_key = NEW._Term_key) = 1
THEN
	RAISE EXCEPTION E'Cannot Annotate to an Obsolete Term.';
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Annot_insert() TO public;

CREATE TRIGGER VOC_Annot_insert_trigger
AFTER INSERT ON VOC_Annot
FOR EACH ROW
EXECUTE PROCEDURE VOC_Annot_insert();

COMMENT ON FUNCTION mgd.VOC_Annot_insert() IS 'creates an update trigger to call voc_annot';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: VOC_Annot_update()
--
-- DESCRIPTOIN:
--
-- TR5721/propagate modification date and modified by to all evidence records
-- 	when the annotation term is modified.
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS VOC_Annot_update_trigger ON VOC_Annot;
DROP FUNCTION IF EXISTS VOC_Annot_update();

CREATE OR REPLACE FUNCTION VOC_Annot_update() RETURNS TRIGGER AS \$\$

BEGIN

UPDATE VOC_Evidence
SET modification_date = current_date, _ModifiedBy_key = VOC_Evidence._ModifiedBy_key
WHERE NEW._Annot_key = VOC_Evidence._Annot_key
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Annot_update() TO public;

CREATE TRIGGER VOC_Annot_update_trigger
AFTER UPDATE OF _Term_key ON VOC_Annot
FOR EACH ROW
EXECUTE PROCEDURE VOC_Annot_update();

COMMENT ON FUNCTION mgd.VOC_Annot_update() IS 'creates an update trigger to call voc_annot';

EOSQL
