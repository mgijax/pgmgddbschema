#!/bin/sh

#
# any changes to the trigger may required changes to the unittests 
# see test/unittest/trigger/GXD_Index_tests.py
#

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Index_insert_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_insert();

CREATE OR REPLACE FUNCTION GXD_Index_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_assocKey int;

BEGIN

--
-- NAME: GXD_Index_insert()
--
-- DESCRIPTOIN:
--
--	1) if the Reference exists as group = 'Expression'
--		and status not in ('Full-coded')
--		in BIB_Workflow_Status,
--	   then
--		set existing BIB_Workflow_Status.isCurrent = 0
--		add new BIB_Workflow_Status._Status_key = 'Indexed'
--
--	2) add BIB_DataSet_Assoc, if necessary
--
-- changes to this trigger require changes to procedure/BIB_updateWFStatusGXD_create.object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- obsolete
IF NOT EXISTS (SELECT 1 FROM BIB_DataSet_Assoc b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._DataSet_key = 1004)
THEN
    v_assocKey := max(_Assoc_key) + 1 from BIB_DataSet_Assoc;

    INSERT INTO BIB_DataSet_Assoc 
	VALUES(v_assocKey, NEW._Refs_key, 1004, 0, 0, NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
    ;
END IF;

IF EXISTS (SELECT 1 FROM BIB_Workflow_Status b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._Group_key = 31576665
	AND b._Status_key not in (31576674))
THEN
    UPDATE BIB_Workflow_Status w set isCurrent = 0
    WHERE NEW._Refs_key = w._Refs_key
        AND w._Group_key = 31576665
    ;
    INSERT INTO BIB_Workflow_Status 
    VALUES((select max(_Assoc_key) + 1 from BIB_Workflow_Status), NEW._Refs_key, 31576665, 31576673, 1, 
    	NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
    ;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_insert() TO public;

CREATE TRIGGER GXD_Index_insert_trigger
AFTER INSERT on GXD_Index
FOR EACH ROW
EXECUTE PROCEDURE GXD_Index_insert();

COMMENT ON FUNCTION mgd.GXD_Index_insert() IS 'creates an after-insert trigger';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Index_insert_before_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_insert_before();

CREATE OR REPLACE FUNCTION GXD_Index_insert_before() RETURNS TRIGGER AS \$\$

BEGIN

--
-- NAME: GXD_Index_insert_before()
--
-- DESCRIPTOIN:
--
--	set the _Priority_key/_ConditionalMutants_key values as necessary
--	BEFORE insert
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

-- if reference is not currently used and priority is null, no default
IF NOT EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
   AND NEW._Priority_key IS NULL
THEN
    RAISE EXCEPTION E'Priority Required';
END IF;

-- if reference is not currently used and conditional is null, default is 'Not Applicable'
IF NOT EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
   AND NEW._ConditionalMutants_key IS NULL
THEN
   NEW._ConditionalMutants_key := 4834242;
END IF;

-- if reference is used...
IF EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
THEN
    -- if priority is null, then use default
    IF NEW._Priority_key IS NULL
    THEN
        NEW._Priority_key := DISTINCT _Priority_key FROM GXD_Index WHERE _Refs_key = NEW._Refs_key;
    END IF;

    -- if conditional is null, then use default
    IF NEW._ConditionalMutants_key IS NULL
    THEN
        NEW._ConditionalMutants_key := DISTINCT _ConditionalMutants_key FROM GXD_Index WHERE _Refs_key = NEW._Refs_key;
    END IF;

    -- use priority/conditional for every instance of the reference
    UPDATE GXD_Index
    SET _Priority_key = NEW._Priority_key,
        _ConditionalMutants_key = NEW._ConditionalMutants_key 
    WHERE _Refs_key = NEW._Refs_key
    ;

END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_insert_before() TO public;

CREATE TRIGGER GXD_Index_insert_before_trigger
BEFORE INSERT on GXD_Index
FOR EACH ROW
EXECUTE PROCEDURE GXD_Index_insert_before();

COMMENT ON FUNCTION mgd.GXD_Index_insert_before() IS 'creates an before-insert trigger';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS GXD_Index_update_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_update();

CREATE OR REPLACE FUNCTION GXD_Index_update() RETURNS TRIGGER AS \$\$

BEGIN

--
-- NAME: GXD_Index_update()
--
-- DESCRIPTOIN:
--
--	update all _Priority_key/_ConditionalMutants_key for all instances of NEW._Refs_key
--	only if index count < 2000
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

IF (SELECT COUNT(*) FROM GXD_Index WHERE _Refs_key = NEW._Refs_key) < 2000
THEN

	UPDATE GXD_Index
	SET _Priority_key = NEW._Priority_key,
    	_ConditionalMutants_key = NEW._ConditionalMutants_key 
	WHERE _Refs_key = NEW._Refs_key
	;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_update() TO public;

CREATE TRIGGER GXD_Index_update_trigger
AFTER UPDATE OF _Priority_key, _ConditionalMutants_key ON GXD_Index
FOR EACH ROW
-- to avoid recursive trigger calls
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE GXD_Index_update();

COMMENT ON FUNCTION mgd.GXD_Index_update() IS 'creates an after-update trigger';

EOSQL

