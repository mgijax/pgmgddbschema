#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Index_insert()
--
-- DESCRIPTOIN:
--
--	add BIB_DataSet_Assoc, if necessary
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Index_insert_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_insert();

CREATE OR REPLACE FUNCTION GXD_Index_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_assocKey int;

BEGIN

IF NOT EXISTS (SELECT 1 FROM BIB_DataSet_Assoc b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._DataSet_key = 1004)
THEN
    v_assocKey := max(_Assoc_key) + 1 from BIB_DataSet_Assoc;

    INSERT INTO BIB_DataSet_Assoc 
	VALUES(v_assocKey, NEW._Refs_key, 1004, 0, 0, NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
    ;
END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_insert() TO public;

CREATE TRIGGER GXD_Index_insert_trigger
AFTER INSERT on GXD_Index
FOR EACH ROW
EXECUTE PROCEDURE GXD_Index_insert();

COMMENT ON FUNCTION mgd.GXD_Index_insert() IS 'creates an after-insert trigger';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Index_insert_before()
--
-- DESCRIPTOIN:
--
--	1) set the _Priority_key/_ConditionalMutants_key values to same values as an existing _Refs_key
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Index_insert_before_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_insert_before();

CREATE OR REPLACE FUNCTION GXD_Index_insert_before() RETURNS TRIGGER AS \$\$

BEGIN

-- no default
IF NOT EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
   AND NEW._Priority_key IS NULL
THEN
    RAISE EXCEPTION E'\nPriority Required';
END IF;

-- default is 'Not Applicable'
IF NOT EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
   AND NEW._ConditionalMutants_key IS NULL
THEN
   NEW._ConditionalMutants_key := 4834242;
END IF;

IF EXISTS (SELECT 1 FROM GXD_Index WHERE _Refs_key = NEW._Refs_key)
THEN
    IF NEW._Priority_key IS NULL
    THEN
        NEW._Priority_key := DISTINCT _Priority_key FROM GXD_Index WHERE _Refs_key = NEW._Refs_key;
    END IF;

    IF NEW._ConditionalMutants_key IS NULL
    THEN
        NEW._ConditionalMutants_key := DISTINCT _ConditionalMutants_key FROM GXD_Index WHERE _Refs_key = NEW._Refs_key;
    END IF;

    UPDATE GXD_Index
    SET _Priority_key = NEW._Priority_key,
        _ConditionalMutants_key = NEW._ConditionalMutants_key 
    WHERE _Refs_key = NEW._Refs_key
    ;

END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_insert_before() TO public;

CREATE TRIGGER GXD_Index_insert_before_trigger
BEFORE INSERT on GXD_Index
FOR EACH ROW
EXECUTE PROCEDURE GXD_Index_insert_before();

COMMENT ON FUNCTION mgd.GXD_Index_insert_before() IS 'creates an before-insert trigger';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Index_update()
--
-- DESCRIPTOIN:
--
--	1) update all _Priority_key/_ConditionalMutants_key for all instances of NEW._Refs_key
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Index_update_trigger ON GXD_Index;
DROP FUNCTION IF EXISTS GXD_Index_update();

CREATE OR REPLACE FUNCTION GXD_Index_update() RETURNS TRIGGER AS \$\$

BEGIN

UPDATE GXD_Index
SET _Priority_key = NEW._Priority_key,
    _ConditionalMutants_key = NEW._ConditionalMutants_key 
WHERE _Refs_key = NEW._Refs_key
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Index_update() TO public;

CREATE TRIGGER GXD_Index_update_trigger
AFTER UPDATE OF _Priority_key, _ConditionalMutants_key ON GXD_Index
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE GXD_Index_update();

COMMENT ON FUNCTION mgd.GXD_Index_update() IS 'creates an after-update trigger';

EOSQL

