#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Assay_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Assay_insert_trigger ON GXD_Assay;
DROP FUNCTION IF EXISTS GXD_Assay_insert();

CREATE OR REPLACE FUNCTION GXD_Assay_insert() RETURNS TRIGGER AS \$\$
BEGIN

--if not exists (select 1 from inserted i, BIB_DataSet_Assoc b
        --where i._Refs_key = b._Refs_key
        --and b._DataSet_key = 1004)
   --and (select i._AssayType_key from inserted i) in (1,2,3,4,5,6,8,9)
--begin
    --declare @assocKey integer
    --select @assocKey = max(_Assoc_key) + 1 from BIB_DataSet_Assoc
    --insert into BIB_DataSet_Assoc
        --select @assocKey, i._Refs_key, 1004, 0, i._CreatedBy_key, i._ModifiedBy_key, getdate(), getdate() from inserted i
--end

PERFORM ACC_assignMGI(1001, NEW._Assay_key, 'Assay');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Assay_insert() TO public;

CREATE TRIGGER GXD_Assay_insert_trigger
AFTER INSERT ON GXD_Assay
FOR EACH ROW
EXECUTE PROCEDURE GXD_Assay_insert();

COMMENT ON FUNCTION mgd.GXD_Assay_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
