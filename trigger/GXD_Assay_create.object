#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Assay_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Assay_delete_trigger ON GXD_Assay;
DROP FUNCTION IF EXISTS GXD_Assay_delete();

CREATE OR REPLACE FUNCTION GXD_Assay_delete() RETURNS TRIGGER AS \$\$
BEGIN

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Assay_key
AND a._MGIType_key = 8
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Assay_delete() TO public;

CREATE TRIGGER GXD_Assay_delete_trigger
AFTER DELETE on GXD_Assay
FOR EACH ROW
EXECUTE PROCEDURE GXD_Assay_delete();

COMMENT ON FUNCTION mgd.GXD_Assay_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: GXD_Assay_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
--	1) if the Reference exists as group = 'Expression'
--		in any BIB_Workflow_Status,
--              and BIB_Workflow_Status is not equal to "Full-coded"
--              and BIB_Workflow_Status.isCurrent = 1
--	   then
--		set existing BIB_Workflow_Status.isCurrent = 0
--		add new BIB_Workflow_Status._Status_key = 'Full-coded'
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS GXD_Assay_insert_trigger ON GXD_Assay;
DROP FUNCTION IF EXISTS GXD_Assay_insert();

CREATE OR REPLACE FUNCTION GXD_Assay_insert() RETURNS TRIGGER AS \$\$

DECLARE
v_assocKey int;

BEGIN

-- obsolete
IF NOT EXISTS (SELECT 1 FROM BIB_DataSet_Assoc b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._DataSet_key = 1004)
   AND NEW._AssayType_key in (1,2,3,4,5,6,8,9)
THEN
    v_assocKey := max(_Assoc_key) + 1 from BIB_DataSet_Assoc;
    INSERT INTO BIB_DataSet_Assoc
        SELECT v_assocKey, NEW._Refs_key, 1004, 0, 0, NEW._CreatedBy_key, NEW._ModifiedBy_key, 
		now(), now();
END IF;

IF EXISTS (SELECT 1 FROM BIB_Workflow_Status b
        WHERE NEW._Refs_key = b._Refs_key
        AND b._Group_key = 31576665
        AND b._Status_key != 31576674
	AND b.isCurrent = 1)
   AND NEW._AssayType_key in (1,2,3,4,5,6,8,9)
THEN
    UPDATE BIB_Workflow_Status w set isCurrent = 0
    WHERE NEW._Refs_key = w._Refs_key
        AND w._Group_key = 31576665
    ;
    INSERT INTO BIB_Workflow_Status 
    VALUES((select max(_Assoc_key) + 1 from BIB_Workflow_Status), NEW._Refs_key, 31576665, 31576674, 1, 
    	NEW._CreatedBy_key, NEW._ModifiedBy_key, now(), now())
    ;
END IF;

PERFORM ACC_assignMGI(1001, NEW._Assay_key, 'Assay');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION GXD_Assay_insert() TO public;

CREATE TRIGGER GXD_Assay_insert_trigger
AFTER INSERT ON GXD_Assay
FOR EACH ROW
EXECUTE PROCEDURE GXD_Assay_insert();

COMMENT ON FUNCTION mgd.GXD_Assay_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
