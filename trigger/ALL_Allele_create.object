#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_Allele_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- Must check:
--	
-- MGI_Relationship/MGI_Relationship_Category
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS ALL_Allele_delete_trigger ON ALL_Allele;
DROP FUNCTION IF EXISTS ALL_Allele_delete();

CREATE OR REPLACE FUNCTION ALL_Allele_delete() RETURNS TRIGGER AS \$\$
BEGIN

-- Disallow deletion if Allele is currently referenced elsewhere
IF EXISTS (SELECT * FROM MGI_Relationship r, MGI_Relationship_Category c
          WHERE OLD._Allele_key = r._Object_key_1
          AND r._Category_key  = c._Category_key
          AND c._MGIType_key_1 = 11)
THEN
	RAISE EXCEPTION E'Allele Symbol is referenced in MGI Relationship(s)';
END IF;

-- Disallow deletion if Allele is currently referenced elsewhere
IF EXISTS (SELECT * FROM MGI_Relationship r, MGI_Relationship_Category c
          WHERE OLD._Allele_key = r._Object_key_2
          AND r._Category_key  = c._Category_key
          AND c._MGIType_key_2 = 11)
THEN
	RAISE EXCEPTION E'Allele Symbol is referenced in MGI Relationship(s)';
END IF;

IF EXISTS (SELECT * FROM VOC_Annot a
          WHERE OLD._Allele_key = a._Object_key
          AND a._AnnotType_key = 1012)
THEN
        RAISE EXCEPTION E'Allele is referenced in Allele/Disease Annotations';
END IF;

-- update cache tables

UPDATE GXD_AlleleGenotype set _Marker_key = null
WHERE _Marker_key = OLD._Marker_key
AND _Allele_key = OLD._Allele_key
;

UPDATE GXD_AllelePair set _Marker_key = null
WHERE _Marker_key = OLD._Marker_key
AND (_Allele_key_1 = OLD._Allele_key or _Allele_key_2 = OLD._Allele_key)
;

UPDATE MRK_OMIM_Cache set _Marker_key = null
WHERE _Marker_key = OLD._Marker_key
AND _Allele_key = OLD._Allele_key
;

UPDATE PRB_Strain_Marker set _Marker_key = null
WHERE _Marker_key = OLD._Marker_key
AND _Allele_key = OLD._Allele_key
;

DELETE FROM IMG_ImagePane_Assoc a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MAP_Coord_Feature a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MAP_Coordinate a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MGI_Note a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MGI_Property a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MGI_Reference_Assoc a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM MGI_Synonym a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

DELETE FROM VOC_Annot a
WHERE a._Object_key = OLD._Allele_key
AND a._AnnotType_key = 1014
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Allele_key
AND a._MGIType_key = 11
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_Allele_delete() TO public;

CREATE TRIGGER ALL_Allele_delete_trigger
AFTER DELETE on ALL_Allele
FOR EACH ROW
EXECUTE PROCEDURE ALL_Allele_delete();

COMMENT ON FUNCTION mgd.ALL_Allele_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_Allele_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- RULES:
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS ALL_Allele_insert_trigger ON ALL_Allele;
DROP FUNCTION IF EXISTS ALL_Allele_insert();

CREATE OR REPLACE FUNCTION ALL_Allele_insert() RETURNS TRIGGER AS \$\$

BEGIN

PERFORM ACC_assignMGI(1001, NEW._Allele_key, 'Allele');

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_Allele_insert() TO public;

CREATE TRIGGER ALL_Allele_insert_trigger
AFTER INSERT ON ALL_Allele
FOR EACH ROW
EXECUTE PROCEDURE ALL_Allele_insert();

COMMENT ON FUNCTION mgd.ALL_Allele_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL

***************************************

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

--
-- NAME: ALL_Allele_update()
--
-- DESCRIPTOIN:
--
-- 	1) GO check: approved/autoload may exist in VOC_Evidence/inferredFrom
--	2) if setting Allele Status = Deleted, then check cross-references
--
-- RULES:
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DROP TRIGGER IF EXISTS ALL_Allele_update_trigger ON ALL_Allele;
DROP FUNCTION IF EXISTS ALL_Allele_update();

DROP TRIGGER IF EXISTS ALL_Allele_update2_trigger ON ALL_Allele;
DROP FUNCTION IF EXISTS ALL_Allele_update2();

CREATE OR REPLACE FUNCTION ALL_Allele_update() RETURNS TRIGGER AS \$\$

BEGIN

--
-- in progress =  847111
-- reserved = 847113
-- approved = 847114
-- autoload = 3983021
-- deleted =  847112
--
-- GO check: approved/autoload
--

IF OLD._Allele_Status_key in (847114,3983021)
   AND
   NEW._Allele_Status_key in (847111,847112,847113)
   AND
   EXISTS (SELECT 1 FROM VOC_Annot a, VOC_Evidence e, ACC_Accession aa
        WHERE a._AnnotType_key = 1000
        AND a._Object_key = OLD._Marker_key
        AND a._Annot_key = e._Annot_key
        AND e.inferredFrom = aa.accID
        AND aa._MGIType_key = 11
        AND aa._Object_key = OLD._Allele_key)
THEN
        RAISE EXCEPTION E'You cannot change the Allele status from\nApproved/Autoload to Deleted, Reserved or Pending.\n\nThis Allele is cross-referenced to a GO annotation.';
END IF;

--
-- if setting Allele Status = Deleted, then check cross-references
--

IF NEW._Allele_Status_key = 847112
   AND
   EXISTS (SELECT 1 FROM MGI_Relationship r
        WHERE r._Category_key in (1003, 1004)
        AND r._Object_key_1 = NEW._Allele_key)
THEN
        RAISE EXCEPTION E'You cannot change the Allele status to\nDeleted.\n\nThis Allele is cross-referenced to a Organizer in a MGI_Relationship record.';
END IF;

-- Non-Approved Alleles cannot have Genotypes or Strain associations

IF OLD._Allele_Status_key != NEW._Allele_Status_key 
	AND NEW._Allele_Status_key NOT IN (847114,3983021)
THEN
    IF EXISTS (SELECT * FROM GXD_AlleleGenotype WHERE GXD_AlleleGenotype._Allele_key = NEW._Allele_key)
    THEN
            RAISE EXCEPTION E'Allele Symbol is referenced in GXD Allele Pair Record(s); Approved/Autoload Status cannot be changed.';
    END IF;

    IF EXISTS (SELECT * FROM MLD_Expt_Marker
            WHERE MLD_Expt_Marker._Allele_key = NEW._Allele_key)
    THEN
            RAISE EXCEPTION E'Allele Symbol is referenced in Mapping Experiment Marker Record(s); Approved/Autoload Status cannot be changed.';
    END IF;

    IF EXISTS (SELECT * FROM PRB_Strain_Marker
            WHERE PRB_Strain_Marker._Allele_key = NEW._Allele_key)
    THEN
            RAISE EXCEPTION E'Allele Symbol is referenced in Strain/Allele Record(s); Approved/Autoload Status cannot be changed.';
    END IF;
END IF;

-- update cache tables

UPDATE GXD_AlleleGenotype set _Marker_key = NEW._Marker_key
WHERE _Allele_key = NEW._Allele_key
AND NEW._MarkerAllele_Status_key != 4268546
;

UPDATE GXD_AllelePair set _Marker_key = NEW._Marker_key
WHERE (_Allele_key_1 = NEW._Allele_key or _Allele_key_2 = NEW._Allele_key)
AND NEW._MarkerAllele_Status_key != 4268546
;

UPDATE MRK_OMIM_Cache set _Marker_key = NEW._Marker_key
WHERE _Allele_key = NEW._Allele_key
AND NEW._MarkerAllele_Status_key != 4268546
;

UPDATE PRB_Strain_Marker set _Marker_key = NEW._Marker_key
WHERE _Allele_key = NEW._Allele_key
AND NEW._MarkerAllele_Status_key != 4268546
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_Allele_update() TO public;

CREATE TRIGGER ALL_Allele_update_trigger
AFTER UPDATE ON ALL_Allele
FOR EACH ROW
EXECUTE PROCEDURE ALL_Allele_update();

COMMENT ON FUNCTION mgd.ALL_Allele_update() IS 'creates an UPDATE trigger to check some permissions';

-------------------------

CREATE OR REPLACE FUNCTION ALL_Allele_update2() RETURNS TRIGGER AS \$\$

BEGIN

-- If updating symbol, set needsReview flag for Strain

PERFORM PRB_setStrainReview (NULL, NEW._Allele_key);

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION ALL_Allele_update2() TO public;

CREATE TRIGGER ALL_Allele_update2_trigger
AFTER UPDATE OF symbol ON ALL_Allele
FOR EACH ROW
EXECUTE PROCEDURE ALL_Allele_update2();

COMMENT ON FUNCTION mgd.ALL_Allele_update2() IS 'creates an UPDATE trigger when specific field is updated';

EOSQL


