#!/bin/csh -f

# History
#
# 10/27/2009 lec
#	- TR 9919; it may be wise to add "nomenSymbol = null" to the
#	  "update ALL_Allele" section in order to make certain
#	  that the nomenSymbol gets set to null whenever a
#	  a new allele/marker association is added.
#
# 11/25/2008 - jsb - added for gene trap LF (TR7493) release

cd `dirname $0` && source ./Configuration

cat - <<EOSQL | ${MGI_DBUTILS}/bin/doisql.csh ${DBSERVER} ${DBNAME} $0

use ${DBNAME}
go

create trigger ALL_Marker_Assoc_Insert
on ALL_Marker_Assoc
for insert
as
    /* if we already have an associated marker for the allele, then bail out;
     * we can only have one marker per allele currently
     */

    if (select count(*) from ALL_Marker_Assoc a, inserted i
	where a._Allele_key = i._Allele_key) > 1
    begin
	rollback transaction
	raiserror 99999 "Cannot have more than one marker per allele"
	return
    end

    /* if the allele already has a nomenSymbol marker, then bail out; this
     * would also essentially be a second marker association
     */
    if exists (select 1 from inserted i, ALL_Allele a
	where i._Allele_key = a._Allele_key and a.nomenSymbol != null)
    begin
	rollback transaction
	raiserror 99999 "Cannot set another marker for an allele with a nomen symbol"
	return
    end

    /* otherwise, update the allele's cached marker key 
     * and set the nomenSymbol = null
     * (unless a curator flagged this as an invalid association
     */

    update ALL_Allele 
    set _Marker_key = i._Marker_key, nomenSymbol = null
    from ALL_Allele a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update GXD_AlleleGenotype set _Marker_key = i._Marker_key
    from GXD_AlleleGenotype a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update GXD_AllelePair set _Marker_key = i._Marker_key
    from GXD_AllelePair a, inserted i, VOC_Term t
    where (a._Allele_key_1 = i._Allele_key or a._Allele_key_2 = i._Allele_key)
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update MRK_OMIM_Cache set _Marker_key = i._Marker_key
    from MRK_OMIM_Cache a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update PRB_Strain_Marker set _Marker_key = i._Marker_key
    from PRB_Strain_Marker a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"
go

create trigger ALL_Marker_Assoc_Delete
on ALL_Marker_Assoc
for delete
as

/* if we are deleting a marker/allele association, then we need to set the
 * cached marker key in ALL_Allele to be null
 */

update ALL_Allele set _Marker_key = null
from ALL_Allele a, deleted d
where d._Marker_key = a._Marker_key
    and d._Allele_key = a._Allele_key

/* also remove the marker association in various other tables */

update GXD_AlleleGenotype set _Marker_key = null
from GXD_AlleleGenotype a, deleted d
where d._Marker_key = a._Marker_key
    and d._Allele_key = a._Allele_key

update GXD_AllelePair set _Marker_key = null
from GXD_AllelePair a, deleted d
where d._Marker_key = a._Marker_key
    and (d._Allele_key = a._Allele_key_1 or d._Allele_key = a._Allele_key_2)

update MRK_OMIM_Cache set _Marker_key = null
from MRK_OMIM_Cache a, deleted d
where d._Marker_key = a._Marker_key
    and d._Allele_key = a._Allele_key

update PRB_Strain_Marker set _Marker_key = null
from ALL_Allele a, deleted d
where d._Marker_key = a._Marker_key
    and d._Allele_key = a._Allele_key

go

create trigger ALL_Marker_Assoc_Update
on ALL_Marker_Assoc
for update
as

/* if the allele already has a nomenSymbol marker, then bail out; this
 * would also essentially be a second marker association
 */
if exists (select 1 from inserted i, ALL_Allele a
	where i._Allele_key = a._Allele_key and a.nomenSymbol != null)
begin
    rollback transaction
    raiserror 99999 "Cannot set another marker for an allele with a nomen symbol"
    return
end

/* otherwise, proceed with the update */

if update(_Allele_key) or update(_Marker_key) or update(_Status_key)
begin

    /* if we change the allele or marker keys, then we need to invalidate the
     * prior cached relationships and cache the new ones (as long as the new
     * ones were not invalidated by a curator).  similar process should work
     * for changes to the status key.
     */

    update ALL_Allele set _Marker_key = null
    from ALL_Allele a, deleted d
    where a._Allele_key = d._Allele_key

    update ALL_Allele set _Marker_key = i._Marker_key
    from ALL_Allele a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update GXD_AlleleGenotype set _Marker_key = null
    from GXD_AlleleGenotype a, deleted d
    where a._Allele_key = d._Allele_key

    update GXD_AlleleGenotype set _Marker_key = i._Marker_key
    from GXD_AlleleGenotype a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update GXD_AllelePair set _Marker_key = null
    from GXD_AllelePair a, deleted d
    where (a._Allele_key_1 = d._Allele_key or a._Allele_key_2 = d._Allele_key)

    update GXD_AllelePair set _Marker_key = i._Marker_key
    from GXD_AllelePair a, inserted i, VOC_Term t
    where (a._Allele_key_1 = i._Allele_key or a._Allele_key_2 = i._Allele_key)
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update MRK_OMIM_Cache set _Marker_key = null
    from MRK_OMIM_Cache a, deleted d
    where a._Allele_key = d._Allele_key

    update MRK_OMIM_Cache set _Marker_key = i._Marker_key
    from MRK_OMIM_Cache a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"

    update PRB_Strain_Marker set _Marker_key = null
    from PRB_Strain_Marker a, deleted d
    where a._Allele_key = d._Allele_key

    update PRB_Strain_Marker set _Marker_key = i._Marker_key
    from PRB_Strain_Marker a, inserted i, VOC_Term t
    where a._Allele_key = i._Allele_key
	and i._Status_key = t._Term_key
	and t.term != "Curator Invalidated"
end
go

checkpoint
go

quit

EOSQL
