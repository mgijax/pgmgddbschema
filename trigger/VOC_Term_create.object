#!/bin/sh

cd `dirname $0` && . ./Configuration

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP TRIGGER IF EXISTS VOC_Term_delete_trigger ON VOC_Term;
DROP FUNCTION IF EXISTS VOC_Term_delete();

CREATE OR REPLACE FUNCTION VOC_Term_delete() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: VOC_Term_delete()
--
-- DESCRIPTOIN:
--	
-- the template creates a trigger for all tables that use:
--	_Object_key
--	_MGIType_key
--
-- because these tables cannot use referencial integrity due
-- to the fact that their primary key is not necessarily the
-- member of the _Object_key/_MGIType_key table
--
-- . remove the statements that are not active for your table
-- . add the statements that are being active for your table
--
-- or you may keep all statements in the trigger even if your table
-- does not currently utilize them.
--
-- An example of a table that only needs ACC_Accession : MGI_Organism
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

DELETE FROM MGI_Note m
WHERE m._Object_key = OLD._Term_key
AND m._MGIType_key = 13
;

DELETE FROM MGI_Synonym m
WHERE m._Object_key = OLD._Term_key
AND m._MGIType_key = 13
;

DELETE FROM MGI_SetMember msm 
USING MGI_Set ms
WHERE msm._Object_key = OLD._Term_key
AND msm._Set_key = ms._Set_key
AND ms._MGIType_key = 13
;

DELETE FROM DAG_Node dnode
USING DAG_DAG ddag
WHERE dnode._Object_key = OLD._Term_key
AND dnode._DAG_key = ddag._DAG_key
AND ddag._MGIType_key = 13
;

DELETE FROM ACC_Accession a
WHERE a._Object_key = OLD._Term_key
AND a._MGIType_key = 13
;

DELETE FROM VOC_Annot a
WHERE a._Object_key =  OLD._Term_key
AND a._AnnotType_key = 1024
;

DELETE FROM MGI_Relationship r 
WHERE r._Object_key_1 = OLD._Term_key 
AND r._Category_key = 1005
;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Term_delete() TO public;

CREATE TRIGGER VOC_Term_delete_trigger
AFTER DELETE on VOC_Term
FOR EACH ROW
EXECUTE PROCEDURE VOC_Term_delete();

COMMENT ON FUNCTION mgd.VOC_Term_delete() IS 'creates a delete trigger for this _Object_key/_MGIType_key table';

EOSQL

cat - <<EOSQL | ${PG_DBUTILS}/bin/doisql.csh $0

DROP FUNCTION IF EXISTS VOC_Term_insert();
DROP TRIGGER IF EXISTS VOC_Term_insert_trigger ON VOC_Term;

CREATE OR REPLACE FUNCTION VOC_Term_insert() RETURNS TRIGGER AS \$\$
BEGIN

--
-- NAME: VOC_Term_insert()
--
-- DESCRIPTOIN:
--
--	this insert trigger will call ACC_assignMGI
--	in order to add a distinct MGI accession id
--	to the NEW object
--
-- INPUT:
--	none
--
-- RETURNS:
--	NEW
--

IF (select v._LogicalDB_key from VOC_Vocab v
	where v._Vocab_key = NEW._Vocab_key) = 1
THEN

    PERFORM ACC_assignMGI(1001, NEW._Term_key, 'Vocabulary Term');

END IF;

RETURN NEW;

END;
\$\$
LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION VOC_Term_insert() TO public;

CREATE TRIGGER VOC_Term_insert_trigger
AFTER INSERT ON VOC_Term
FOR EACH ROW
EXECUTE PROCEDURE VOC_Term_insert();

COMMENT ON FUNCTION mgd.VOC_Term_insert() IS 'creates an insert trigger to call acc_assignmgi()/default values';

EOSQL
